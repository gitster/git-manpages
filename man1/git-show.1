'\" t
.\"     Title: git-show
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets v1.79.2 <http://docbook.sf.net/>
.\"      Date: 2025-10-08
.\"    Manual: Git Manual
.\"    Source: Git 2.51.0.480.g60f3f52f17
.\"  Language: English
.\"
.TH "GIT\-SHOW" "1" "2025-10-08" "Git 2\&.51\&.0\&.480\&.g60f3f5" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-show \- Show various types of objects
.SH "SYNOPSIS"
.sp
.nf
\fIgit show\fR [<options>] [<object>\&...\:]
.fi
.SH "DESCRIPTION"
.sp
Shows one or more objects (blobs, trees, tags and commits)\&.
.sp
For commits it shows the log message and textual diff\&. It also presents the merge commit in a special format as produced by \fIgit diff\-tree \-\-cc\fR\&.
.sp
For tags, it shows the tag message and the referenced objects\&.
.sp
For trees, it shows the names (equivalent to \fIgit ls\-tree\fR with \-\-name\-only)\&.
.sp
For plain blobs, it shows the plain contents\&.
.sp
Some options that \fIgit log\fR command understands can be used to control how the changes the commit introduces are shown\&.
.sp
This manual page describes only the most frequently used options\&.
.SH "OPTIONS"
.PP
<object>\&...\:
.RS 4
The names of objects to show (defaults to
\fIHEAD\fR)\&. For a more complete list of ways to spell object names, see "SPECIFYING REVISIONS" section in
\fBgitrevisions\fR(7)\&.
.RE
.PP
\fB\-\-pretty\fR[\fB=\fR\fI<format>\fR], \fB\-\-format=\fR\fI<format>\fR
.RS 4
Pretty\-print the contents of the commit logs in a given format, where
\fI<format>\fR
can be one of
\fBoneline\fR,
\fBshort\fR,
\fBmedium\fR,
\fBfull\fR,
\fBfuller\fR,
\fBreference\fR,
\fBemail\fR,
\fBraw\fR,
\fBformat:\fR\fI<string>\fR
and
\fBtformat:\fR\fI<string>\fR\&. When
\fI<format>\fR
is none of the above, and has
\fB%\fR\fI<placeholder>\fR
in it, it acts as if
\fB\-\-pretty=tformat:\fR\fI<format>\fR
were given\&.
.sp
See the "PRETTY FORMATS" section for some additional details for each format\&. When
\fB=\fR\fI<format>\fR
part is omitted, it defaults to
\fBmedium\fR\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
you can specify the default pretty format in the repository configuration (see
\fBgit-config\fR(1))\&.
.sp .5v
.RE
.RE
.PP
\fB\-\-abbrev\-commit\fR
.RS 4
Instead of showing the full 40\-byte hexadecimal commit object name, show a prefix that names the object uniquely\&.
\fB\-\-abbrev=\fR\fI<n>\fR
(which also modifies diff output, if it is displayed) option can be used to specify the minimum length of the prefix\&.
.sp
This should make
\fB\-\-pretty=oneline\fR
a whole lot more readable for people using 80\-column terminals\&.
.RE
.PP
\fB\-\-no\-abbrev\-commit\fR
.RS 4
Show the full 40\-byte hexadecimal commit object name\&. This negates
\fB\-\-abbrev\-commit\fR, either explicit or implied by other options such as
\fB\-\-oneline\fR\&. It also overrides the
\fBlog\&.abbrevCommit\fR
variable\&.
.RE
.PP
\fB\-\-oneline\fR
.RS 4
This is a shorthand for
\fB\-\-pretty=oneline\fR
\fB\-\-abbrev\-commit\fR
used together\&.
.RE
.PP
\fB\-\-encoding=\fR\fI<encoding>\fR
.RS 4
Commit objects record the character encoding used for the log message in their encoding header; this option can be used to tell the command to re\-code the commit log message in the encoding preferred by the user\&. For non plumbing commands this defaults to UTF\-8\&. Note that if an object claims to be encoded in
\fBX\fR
and we are outputting in
\fBX\fR, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output\&. Likewise, if iconv(3) fails to convert the commit, we will quietly output the original object verbatim\&.
.RE
.PP
\fB\-\-expand\-tabs=\fR\fI<n>\fR, \fB\-\-expand\-tabs\fR, \fB\-\-no\-expand\-tabs\fR
.RS 4
Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is a multiple of
\fI<n>\fR) in the log message before showing it in the output\&.
\fB\-\-expand\-tabs\fR
is a short\-hand for
\fB\-\-expand\-tabs=8\fR, and
\fB\-\-no\-expand\-tabs\fR
is a short\-hand for
\fB\-\-expand\-tabs=0\fR, which disables tab expansion\&.
.sp
By default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i\&.e\&.
\fBmedium\fR, which is the default,
\fBfull\fR, and
\fBfuller\fR)\&.
.RE
.PP
\fB\-\-notes\fR[\fB=\fR\fI<ref>\fR]
.RS 4
Show the notes (see
\fBgit-notes\fR(1)) that annotate the commit, when showing the commit log message\&. This is the default for
\fBgit\fR
\fBlog\fR,
\fBgit\fR
\fBshow\fR
and
\fBgit\fR
\fBwhatchanged\fR
commands when there is no
\fB\-\-pretty\fR,
\fB\-\-format\fR, or
\fB\-\-oneline\fR
option given on the command line\&.
.sp
By default, the notes shown are from the notes refs listed in the
\fBcore\&.notesRef\fR
and
\fBnotes\&.displayRef\fR
variables (or corresponding environment overrides)\&. See
\fBgit-config\fR(1)
for more details\&.
.sp
With an optional
\fI<ref>\fR
argument, use the ref to find the notes to display\&. The ref can specify the full refname when it begins with
\fBrefs/notes/\fR; when it begins with
\fBnotes/\fR,
\fBrefs/\fR
and otherwise
\fBrefs/notes/\fR
is prefixed to form the full name of the ref\&.
.sp
Multiple
\fB\-\-notes\fR
options can be combined to control which notes are being displayed\&. Examples: "\fB\-\-notes=foo\fR" will show only notes from
\fBrefs/notes/foo\fR; "\fB\-\-notes=foo\fR
\fB\-\-notes\fR" will show both notes from "refs/notes/foo" and from the default notes ref(s)\&.
.RE
.PP
\fB\-\-no\-notes\fR
.RS 4
Do not show notes\&. This negates the above
\fB\-\-notes\fR
option, by resetting the list of notes refs from which notes are shown\&. Options are parsed in the order given on the command line, so e\&.g\&. "\fB\-\-notes\fR
\fB\-\-notes=foo\fR
\fB\-\-no\-notes\fR
\fB\-\-notes=bar\fR" will only show notes from
\fBrefs/notes/bar\fR\&.
.RE
.PP
\fB\-\-show\-notes\-by\-default\fR
.RS 4
Show the default notes unless options for displaying specific notes are given\&.
.RE
.PP
\fB\-\-show\-notes\fR[\fB=\fR\fI<ref>\fR], \fB\-\-standard\-notes\fR, \fB\-\-no\-standard\-notes\fR
.RS 4
These options are deprecated\&. Use the above
\fB\-\-notes\fR/\fB\-\-no\-notes\fR
options instead\&.
.RE
.PP
\fB\-\-show\-signature\fR
.RS 4
Check the validity of a signed commit object by passing the signature to
\fBgpg\fR
\fB\-\-verify\fR
and show the output\&.
.RE
.SH "PRETTY FORMATS"
.sp
If the commit is a merge, and if the pretty\-format is not \fBoneline\fR, \fBemail\fR or \fBraw\fR, an additional line is inserted before the \fBAuthor:\fR line\&. This line begins with "Merge: " and the hashes of ancestral commits are printed, separated by spaces\&. Note that the listed commits may not necessarily be the list of the \fIdirect\fR parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file\&.
.sp
There are several built\-in formats, and you can define additional formats by setting a pretty\&.<name> config option to either another format name, or a \fBformat:\fR string, as described below (see \fBgit-config\fR(1))\&. Here are the details of the built\-in formats:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBoneline\fR
.sp
.if n \{\
.RS 4
.\}
.nf
<hash> <title\-line>
.fi
.if n \{\
.RE
.\}
.sp
This is designed to be as compact as possible\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBshort\fR
.sp
.if n \{\
.RS 4
.\}
.nf
commit <hash>
Author: <author>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
<title\-line>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBmedium\fR
.sp
.if n \{\
.RS 4
.\}
.nf
commit <hash>
Author: <author>
Date:   <author\-date>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
<title\-line>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
<full\-commit\-message>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBfull\fR
.sp
.if n \{\
.RS 4
.\}
.nf
commit <hash>
Author: <author>
Commit: <committer>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
<title\-line>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
<full\-commit\-message>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBfuller\fR
.sp
.if n \{\
.RS 4
.\}
.nf
commit <hash>
Author:     <author>
AuthorDate: <author\-date>
Commit:     <committer>
CommitDate: <committer\-date>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
<title\-line>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
<full\-commit\-message>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBreference\fR
.sp
.if n \{\
.RS 4
.\}
.nf
<abbrev\-hash> (<title\-line>, <short\-author\-date>)
.fi
.if n \{\
.RE
.\}
.sp
This format is used to refer to another commit in a commit message and is the same as
\fB\-\-pretty=\fR\*(Aqformat:%C(\fBauto\fR)\fB%h\fR
(\fB%s\fR,
\fB%ad\fR)\*(Aq\&. By default, the date is formatted with
\fB\-\-date=short\fR
unless another
\fB\-\-date\fR
option is explicitly specified\&. As with any
\fBformat:\fR
with format placeholders, its output is not affected by other options like
\fB\-\-decorate\fR
and
\fB\-\-walk\-reflogs\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBemail\fR
.sp
.if n \{\
.RS 4
.\}
.nf
From <hash> <date>
From: <author>
Date: <author\-date>
Subject: [PATCH] <title\-line>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
<full\-commit\-message>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBmboxrd\fR
.sp
Like
\fBemail\fR, but lines in the commit message starting with "From " (preceded by zero or more ">") are quoted with ">" so they aren\(cqt confused as starting a new commit\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBraw\fR
.sp
The
\fBraw\fR
format shows the entire commit exactly as stored in the commit object\&. Notably, the hashes are displayed in full, regardless of whether
\fB\-\-abbrev\fR
or
\fB\-\-no\-abbrev\fR
are used, and
\fIparents\fR
information show the true parent commits, without taking grafts or history simplification into account\&. Note that this format affects the way commits are displayed, but not the way the diff is shown e\&.g\&. with
\fBgit\fR
\fBlog\fR
\fB\-\-raw\fR\&. To get full object names in a raw diff format, use
\fB\-\-no\-abbrev\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBformat:\fR\fI<format\-string>\fR
.sp
The
\fBformat:\fR\fI<format\-string>\fR
format allows you to specify which information you want to show\&. It works a little bit like printf format, with the notable exception that you get a newline with
\fB%n\fR
instead of
\fB\en\fR\&.
.sp
E\&.g,
\fIformat:"The author of %h was %an, %ar%nThe title was >>%s<<%n"\fR
would show something like this:
.sp
.if n \{\
.RS 4
.\}
.nf
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing \-p<n> for traditional diff input\&.<<
.fi
.if n \{\
.RE
.\}
.sp
The placeholders are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Placeholders that expand to a single literal character:
.PP
\fB%n\fR
.RS 4
newline
.RE
.PP
\fB%%\fR
.RS 4
a raw
\fB%\fR
.RE
.PP
\fB%x00\fR
.RS 4
\fB%x\fR
followed by two hexadecimal digits is replaced with a byte with the hexadecimal digits\*(Aq value (we will call this "literal formatting code" in the rest of this document)\&.
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Placeholders that affect formatting of later placeholders:
.PP
\fB%Cred\fR
.RS 4
switch color to red
.RE
.PP
\fB%Cgreen\fR
.RS 4
switch color to green
.RE
.PP
\fB%Cblue\fR
.RS 4
switch color to blue
.RE
.PP
\fB%Creset\fR
.RS 4
reset color
.RE
.PP
\fB%C\fR(\fI<spec>\fR)
.RS 4
color specification, as described under Values in the "CONFIGURATION FILE" section of
\fBgit-config\fR(1)\&. By default, colors are shown only when enabled for log output (by
\fBcolor\&.diff\fR,
\fBcolor\&.ui\fR, or
\fB\-\-color\fR, and respecting the
\fBauto\fR
settings of the former if we are going to a terminal)\&.
\fB%C\fR(\fBauto\fR,\fI<spec>\fR) is accepted as a historical synonym for the default (e\&.g\&.,
\fB%C\fR(\fBauto\fR,red))\&. Specifying
\fB%C\fR(\fBalways\fR,\fI<spec>\fR) will show the colors even when color is not otherwise enabled (though consider just using
\fB\-\-color=always\fR
to enable color for the whole output, including this format and anything else git might color)\&.
\fBauto\fR
alone (i\&.e\&.
\fB%C\fR(\fBauto\fR)) will turn on auto coloring on the next placeholders until the color is switched again\&.
.RE
.PP
\fB%m\fR
.RS 4
left (<), right (>) or boundary (\fB\-\fR) mark
.RE
.PP
\fB%w\fR([\fI<w>\fR[\fB,\fR\fI<i1>\fR[\fB,\fR\fI<i2>\fR]]])
.RS 4
switch line wrapping, like the
\fB\-w\fR
option of
\fBgit-shortlog\fR(1)\&.
.RE
.PP
\fB%\fR<(\fI<n>\fR[\fB,\fR(\fBtrunc\fR|\fBltrunc\fR|\fBmtrunc\fR)])
.RS 4
make the next placeholder take at least N column widths, padding spaces on the right if necessary\&. Optionally truncate (with ellipsis
\fB\&.\&.\fR) at the left (ltrunc)
\fB\&.\&.\fR\fBft\fR, the middle (mtrunc)
\fBmi\fR\fB\&.\&.\fR\fBle\fR, or the end (trunc)
\fBrig\&.\&.\fR, if the output is longer than
\fI<n>\fR
columns\&. Note 1: that truncating only works correctly with
\fI<n>\fR
>= 2\&. Note 2: spaces around the
\fI<n>\fR
and
\fI<m>\fR
(see below) values are optional\&. Note 3: Emojis and other wide characters will take two display columns, which may over\-run column boundaries\&. Note 4: decomposed character combining marks may be misplaced at padding boundaries\&.
.RE
.PP
\fB%\fR<|(\fI<m>\fR )
.RS 4
make the next placeholder take at least until
\fI<m>\fR
th display column, padding spaces on the right if necessary\&. Use negative
\fI<m>\fR
values for column positions measured from the right hand edge of the terminal window\&.
.RE
.PP
\fB%\fR>(\fI<n>\fR), \fB%\fR>|(\fI<m>\fR)
.RS 4
similar to
\fB%\fR<(\fI<n>\fR),
\fB%\fR<|(\fI<m>\fR) respectively, but padding spaces on the left
.RE
.PP
\fB%\fR>>(\fI<n>\fR), \fB%\fR>>|(\fI<m>\fR)
.RS 4
similar to
\fB%\fR>(\fI<n>\fR),
\fB%\fR>|(\fI<m>\fR) respectively, except that if the next placeholder takes more spaces than given and there are spaces on its left, use those spaces
.RE
.PP
\fB%\fR><(\fI<n>\fR), \fB%\fR><|(\fI<m>\fR)
.RS 4
similar to
\fB%\fR<(\fI<n>\fR),
\fB%\fR<|(\fI<m>\fR) respectively, but padding both sides (i\&.e\&. the text is centered)
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Placeholders that expand to information extracted from the commit:
.PP
\fB%H\fR
.RS 4
commit hash
.RE
.PP
\fB%h\fR
.RS 4
abbreviated commit hash
.RE
.PP
\fB%T\fR
.RS 4
tree hash
.RE
.PP
\fB%t\fR
.RS 4
abbreviated tree hash
.RE
.PP
\fB%P\fR
.RS 4
parent hashes
.RE
.PP
\fB%p\fR
.RS 4
abbreviated parent hashes
.RE
.PP
\fB%an\fR
.RS 4
author name
.RE
.PP
\fB%aN\fR
.RS 4
author name (respecting \&.mailmap, see
\fBgit-shortlog\fR(1)
or
\fBgit-blame\fR(1))
.RE
.PP
\fB%ae\fR
.RS 4
author email
.RE
.PP
\fB%aE\fR
.RS 4
author email (respecting \&.mailmap, see
\fBgit-shortlog\fR(1)
or
\fBgit-blame\fR(1))
.RE
.PP
\fB%al\fR
.RS 4
author email local\-part (the part before the
\fB@\fR
sign)
.RE
.PP
\fB%aL\fR
.RS 4
author local\-part (see
\fB%al\fR) respecting \&.mailmap, see
\fBgit-shortlog\fR(1)
or
\fBgit-blame\fR(1))
.RE
.PP
\fB%ad\fR
.RS 4
author date (format respects \-\-date= option)
.RE
.PP
\fB%aD\fR
.RS 4
author date, RFC2822 style
.RE
.PP
\fB%ar\fR
.RS 4
author date, relative
.RE
.PP
\fB%at\fR
.RS 4
author date, UNIX timestamp
.RE
.PP
\fB%ai\fR
.RS 4
author date, ISO 8601\-like format
.RE
.PP
\fB%aI\fR
.RS 4
author date, strict ISO 8601 format
.RE
.PP
\fB%as\fR
.RS 4
author date, short format (\fBYYYY\-MM\-DD\fR)
.RE
.PP
\fB%ah\fR
.RS 4
author date, human style (like the
\fB\-\-date=human\fR
option of
\fBgit-rev-list\fR(1))
.RE
.PP
\fB%cn\fR
.RS 4
committer name
.RE
.PP
\fB%cN\fR
.RS 4
committer name (respecting \&.mailmap, see
\fBgit-shortlog\fR(1)
or
\fBgit-blame\fR(1))
.RE
.PP
\fB%ce\fR
.RS 4
committer email
.RE
.PP
\fB%cE\fR
.RS 4
committer email (respecting \&.mailmap, see
\fBgit-shortlog\fR(1)
or
\fBgit-blame\fR(1))
.RE
.PP
\fB%cl\fR
.RS 4
committer email local\-part (the part before the
\fB@\fR
sign)
.RE
.PP
\fB%cL\fR
.RS 4
committer local\-part (see
\fB%cl\fR) respecting \&.mailmap, see
\fBgit-shortlog\fR(1)
or
\fBgit-blame\fR(1))
.RE
.PP
\fB%cd\fR
.RS 4
committer date (format respects \-\-date= option)
.RE
.PP
\fB%cD\fR
.RS 4
committer date, RFC2822 style
.RE
.PP
\fB%cr\fR
.RS 4
committer date, relative
.RE
.PP
\fB%ct\fR
.RS 4
committer date, UNIX timestamp
.RE
.PP
\fB%ci\fR
.RS 4
committer date, ISO 8601\-like format
.RE
.PP
\fB%cI\fR
.RS 4
committer date, strict ISO 8601 format
.RE
.PP
\fB%cs\fR
.RS 4
committer date, short format (\fBYYYY\-MM\-DD\fR)
.RE
.PP
\fB%ch\fR
.RS 4
committer date, human style (like the
\fB\-\-date=human\fR
option of
\fBgit-rev-list\fR(1))
.RE
.PP
\fB%d\fR
.RS 4
ref names, like the \-\-decorate option of
\fBgit-log\fR(1)
.RE
.PP
\fB%D\fR
.RS 4
ref names without the " (", ")" wrapping\&.
.RE
.PP
\fB%\fR(\fBdecorate\fR[\fB:\fR\fI<option>\fR\fB,\fR\&.\&.\&.])
.RS 4
ref names with custom decorations\&. The
\fBdecorate\fR
string may be followed by a colon and zero or more comma\-separated options\&. Option values may contain literal formatting codes\&. These must be used for commas (\fB%x2C\fR) and closing parentheses (\fB%x29\fR), due to their role in the option syntax\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBprefix=\fR\fI<value>\fR: Shown before the list of ref names\&. Defaults to "\ \&("\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBsuffix=\fR\fI<value>\fR: Shown after the list of ref names\&. Defaults to ")"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBseparator=\fR\fI<value>\fR: Shown between ref names\&. Defaults to "\fB,\fR\ \&"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBpointer=\fR\fI<value>\fR: Shown between HEAD and the branch it points to, if any\&. Defaults to "\ \&\fB\-\fR>\ \&"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBtag=\fR\fI<value>\fR: Shown before tag names\&. Defaults to "\fBtag:\fR\ \&"\&.
.RE
.RE
.RE
.sp
For example, to produce decorations with no wrapping or tag annotations, and spaces as separators:
.sp
+
\fB%\fR(\fBdecorate:prefix=\fR,suffix=,tag=,separator= )
.PP
\fB%\fR(\fBdescribe\fR[\fB:\fR\fI<option>\fR\fB,\fR\&.\&.\&.])
.RS 4
human\-readable name, like
\fBgit-describe\fR(1); empty string for undescribable commits\&. The
\fBdescribe\fR
string may be followed by a colon and zero or more comma\-separated options\&. Descriptions can be inconsistent when tags are added or removed at the same time\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBtags\fR[\fB=\fR\fI<bool\-value>\fR]: Instead of only considering annotated tags, consider lightweight tags as well\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBabbrev=\fR\fI<number>\fR: Instead of using the default number of hexadecimal digits (which will vary according to the number of objects in the repository with a default of 7) of the abbreviated object name, use <number> digits, or as many digits as needed to form a unique object name\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBmatch=\fR\fI<pattern>\fR: Only consider tags matching the given
\fBglob\fR(\fB7\fR)
\fI<pattern>\fR, excluding the
\fBrefs/tags/\fR
prefix\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBexclude=\fR\fI<pattern>\fR: Do not consider tags matching the given
\fBglob\fR(\fB7\fR)
\fI<pattern>\fR, excluding the
\fBrefs/tags/\fR
prefix\&.
.RE
.RE
.PP
\fB%S\fR
.RS 4
ref name given on the command line by which the commit was reached (like
\fBgit\fR
\fBlog\fR
\fB\-\-source\fR), only works with
\fBgit\fR
\fBlog\fR
.RE
.PP
\fB%e\fR
.RS 4
encoding
.RE
.PP
\fB%s\fR
.RS 4
subject
.RE
.PP
\fB%f\fR
.RS 4
sanitized subject line, suitable for a filename
.RE
.PP
\fB%b\fR
.RS 4
body
.RE
.PP
\fB%B\fR
.RS 4
raw body (unwrapped subject and body)
.RE
.PP
\fB%N\fR
.RS 4
commit notes
.RE
.PP
\fB%GG\fR
.RS 4
raw verification message from GPG for a signed commit
.RE
.PP
\fB%G\fR?
.RS 4
show "G" for a good (valid) signature, "B" for a bad signature, "U" for a good signature with unknown validity, "X" for a good signature that has expired, "Y" for a good signature made by an expired key, "R" for a good signature made by a revoked key, "E" if the signature cannot be checked (e\&.g\&. missing key) and "N" for no signature
.RE
.PP
\fB%GS\fR
.RS 4
show the name of the signer for a signed commit
.RE
.PP
\fB%GK\fR
.RS 4
show the key used to sign a signed commit
.RE
.PP
\fB%GF\fR
.RS 4
show the fingerprint of the key used to sign a signed commit
.RE
.PP
\fB%GP\fR
.RS 4
show the fingerprint of the primary key whose subkey was used to sign a signed commit
.RE
.PP
\fB%GT\fR
.RS 4
show the trust level for the key used to sign a signed commit
.RE
.PP
\fB%gD\fR
.RS 4
reflog selector, e\&.g\&.,
\fBrefs/stash@\fR{1} or
\fBrefs/stash@\fR{2
\fBminutes\fR
\fBago\fR}; the format follows the rules described for the
\fB\-g\fR
option\&. The portion before the
\fB@\fR
is the refname as given on the command line (so
\fBgit\fR
\fBlog\fR
\fB\-g\fR
\fBrefs/heads/master\fR
would yield
\fBrefs/heads/master@\fR{0})\&.
.RE
.PP
\fB%gd\fR
.RS 4
shortened reflog selector; same as
\fB%gD\fR, but the refname portion is shortened for human readability (so
\fBrefs/heads/master\fR
becomes just
\fBmaster\fR)\&.
.RE
.PP
\fB%gn\fR
.RS 4
reflog identity name
.RE
.PP
\fB%gN\fR
.RS 4
reflog identity name (respecting \&.mailmap, see
\fBgit-shortlog\fR(1)
or
\fBgit-blame\fR(1))
.RE
.PP
\fB%ge\fR
.RS 4
reflog identity email
.RE
.PP
\fB%gE\fR
.RS 4
reflog identity email (respecting \&.mailmap, see
\fBgit-shortlog\fR(1)
or
\fBgit-blame\fR(1))
.RE
.PP
\fB%gs\fR
.RS 4
reflog subject
.RE
.PP
\fB%\fR(\fBtrailers\fR[\fB:\fR\fI<option>\fR\fB,\fR\&.\&.\&.])
.RS 4
display the trailers of the body as interpreted by
\fBgit-interpret-trailers\fR(1)\&. The
\fBtrailers\fR
string may be followed by a colon and zero or more comma\-separated options\&. If any option is provided multiple times, the last occurrence wins\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBkey=\fR\fI<key>\fR: only show trailers with specified <key>\&. Matching is done case\-insensitively and trailing colon is optional\&. If option is given multiple times trailer lines matching any of the keys are shown\&. This option automatically enables the
\fBonly\fR
option so that non\-trailer lines in the trailer block are hidden\&. If that is not desired it can be disabled with
\fBonly=false\fR\&. E\&.g\&.,
\fB%\fR(\fBtrailers:key=Reviewed\-by\fR) shows trailer lines with key
\fBReviewed\-by\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBonly\fR[\fB=\fR\fI<bool>\fR]: select whether non\-trailer lines from the trailer block should be included\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBseparator=\fR\fI<sep>\fR: specify the separator inserted between trailer lines\&. Defaults to a line feed character\&. The string <sep> may contain the literal formatting codes described above\&. To use comma as separator one must use
\fB%x2C\fR
as it would otherwise be parsed as next option\&. E\&.g\&.,
\fB%\fR(\fBtrailers:key=Ticket\fR,separator=%x2C ) shows all trailer lines whose key is "Ticket" separated by a comma and a space\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBunfold\fR[\fB=\fR\fI<bool>\fR]: make it behave as if interpret\-trailer\(cqs
\fB\-\-unfold\fR
option was given\&. E\&.g\&.,
\fB%\fR(\fBtrailers:only\fR,unfold=true) unfolds and shows all trailer lines\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBkeyonly\fR[\fB=\fR\fI<bool>\fR]: only show the key part of the trailer\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBvalueonly\fR[\fB=\fR\fI<bool>\fR]: only show the value part of the trailer\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBkey_value_separator=\fR\fI<sep>\fR: specify the separator inserted between the key and value of each trailer\&. Defaults to ": "\&. Otherwise it shares the same semantics as
\fBseparator=\fR\fI<sep>\fR
above\&.
.RE
.RE
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Some placeholders may depend on other options given to the revision traversal engine\&. For example, the \fB%g*\fR reflog options will insert an empty string unless we are traversing reflog entries (e\&.g\&., by \fBgit\fR \fBlog\fR \fB\-g\fR)\&. The \fB%d\fR and \fB%D\fR placeholders will use the "short" decoration format if \fB\-\-decorate\fR was not already provided on the command line\&.
.sp .5v
.RE
.sp
The boolean options accept an optional value [\fB=\fR\fI<bool\-value>\fR]\&. The values taken by \fB\-\-type=bool\fR \fBgit-config\fR(1), like \fByes\fR and \fBoff\fR, are all accepted\&. Giving a boolean option without \fB=\fR\fI<value>\fR is equivalent to giving it with \fB=true\fR\&.
.sp
If you add a \fB+\fR (plus sign) after \fB%\fR of a placeholder, a line\-feed is inserted immediately before the expansion if and only if the placeholder expands to a non\-empty string\&.
.sp
If you add a \fB\-\fR (minus sign) after \fB%\fR of a placeholder, all consecutive line\-feeds immediately preceding the expansion are deleted if and only if the placeholder expands to an empty string\&.
.sp
If you add a \*(Aq \*(Aq (space) after \fB%\fR of a placeholder, a space is inserted immediately before the expansion if and only if the placeholder expands to a non\-empty string\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBtformat:\fR
.sp
The
\fBtformat:\fR
format works exactly like
\fBformat:\fR, except that it provides "terminator" semantics instead of "separator" semantics\&. In other words, each commit has the message terminator character (usually a newline) appended, rather than a separator placed between entries\&. This means that the final entry of a single\-line format will be properly terminated with a new line, just as the "oneline" format does\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git log \-2 \-\-pretty=format:%h 4da45bef \e
  | perl \-pe \*(Aq$_ \&.= " \-\- NO NEWLINE\en" unless /\en/\*(Aq
4da45be
7134973 \-\- NO NEWLINE

$ git log \-2 \-\-pretty=tformat:%h 4da45bef \e
  | perl \-pe \*(Aq$_ \&.= " \-\- NO NEWLINE\en" unless /\en/\*(Aq
4da45be
7134973
.fi
.if n \{\
.RE
.\}
.sp
In addition, any unrecognized string that has a
\fB%\fR
in it is interpreted as if it has
\fBtformat:\fR
in front of it\&. For example, these two are equivalent:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git log \-2 \-\-pretty=tformat:%h 4da45bef
$ git log \-2 \-\-pretty=%h 4da45bef
.fi
.if n \{\
.RE
.\}
.RE
.SH "DIFF FORMATTING"
.sp
The options below can be used to change the way \fBgit\fR \fBshow\fR generates diff output\&.
.PP
\fB\-p\fR, \fB\-u\fR, \fB\-\-patch\fR
.RS 4
Generate patch (see
the section called \(lqGENERATING PATCH TEXT WITH \-P\(rq)\&.
.RE
.PP
\fB\-s\fR, \fB\-\-no\-patch\fR
.RS 4
Suppress all output from the diff machinery\&. Useful for commands like
\fBgit\fR
\fBshow\fR
that show the patch by default to squelch their output, or to cancel the effect of options like
\fB\-\-patch\fR,
\fB\-\-stat\fR
earlier on the command line in an alias\&.
.RE
.PP
\fB\-m\fR
.RS 4
Show diffs for merge commits in the default format\&. This is similar to
\fB\-\-diff\-merges=on\fR, except
\fB\-m\fR
will produce no output unless
\fB\-p\fR
is given as well\&.
.RE
.PP
\fB\-c\fR
.RS 4
Produce combined diff output for merge commits\&. Shortcut for
\fB\-\-diff\-merges=combined\fR
\fB\-p\fR\&.
.RE
.PP
\fB\-\-cc\fR
.RS 4
Produce dense combined diff output for merge commits\&. Shortcut for
\fB\-\-diff\-merges=dense\-combined\fR
\fB\-p\fR\&.
.RE
.PP
\fB\-\-dd\fR
.RS 4
Produce diff with respect to first parent for both merge and regular commits\&. Shortcut for
\fB\-\-diff\-merges=first\-parent\fR
\fB\-p\fR\&.
.RE
.PP
\fB\-\-remerge\-diff\fR
.RS 4
Produce remerge\-diff output for merge commits\&. Shortcut for
\fB\-\-diff\-merges=remerge\fR
\fB\-p\fR\&.
.RE
.PP
\fB\-\-no\-diff\-merges\fR
.RS 4
Synonym for
\fB\-\-diff\-merges=off\fR\&.
.RE
.PP
\fB\-\-diff\-merges=\fR\fI<format>\fR
.RS 4
Specify diff format to be used for merge commits\&. Default is `dense\-combined` unless
\fB\-\-first\-parent\fR
is in use, in which case
\fBfirst\-parent\fR
is the default\&.
.sp
The following formats are supported:
.PP
\fBoff\fR, \fBnone\fR
.RS 4
Disable output of diffs for merge commits\&. Useful to override implied value\&.
.RE
.PP
\fBon\fR, \fBm\fR
.RS 4
Make diff output for merge commits to be shown in the default format\&. The default format can be changed using
\fBlog\&.diffMerges\fR
configuration variable, whose default value is
\fBseparate\fR\&.
.RE
.PP
\fBfirst\-parent\fR, \fB1\fR
.RS 4
Show full diff with respect to first parent\&. This is the same format as
\fB\-\-patch\fR
produces for non\-merge commits\&.
.RE
.PP
\fBseparate\fR
.RS 4
Show full diff with respect to each of parents\&. Separate log entry and diff is generated for each parent\&.
.RE
.PP
\fBcombined\fR, \fBc\fR
.RS 4
Show differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time\&. Furthermore, it lists only files which were modified from all parents\&.
.RE
.PP
\fBdense\-combined\fR, \fBcc\fR
.RS 4
Further compress output produced by
\fB\-\-diff\-merges=combined\fR
by omitting uninteresting hunks whose contents in the parents have only two variants and the merge result picks one of them without modification\&.
.RE
.PP
\fBremerge\fR, \fBr\fR
.RS 4
Remerge two\-parent merge commits to create a temporary tree object\(em\:potentially containing files with conflict markers and such\&. A diff is then shown between that temporary tree and the actual merge commit\&.
.RE
.sp
The output emitted when this option is used is subject to change, and so is its interaction with other options (unless explicitly documented)\&.
.RE
.PP
\fB\-\-combined\-all\-paths\fR
.RS 4
Cause combined diffs (used for merge commits) to list the name of the file from all parents\&. It thus only has effect when
\fB\-\-diff\-merges=\fR[\fBdense\-\fR]\fBcombined\fR
is in use, and is likely only useful if filename changes are detected (i\&.e\&. when either rename or copy detection have been requested)\&.
.RE
.PP
\fB\-U\fR\fI<n>\fR, \fB\-\-unified=\fR\fI<n>\fR
.RS 4
Generate diffs with
\fI<n>\fR
lines of context instead of the usual three\&. Implies
\fB\-\-patch\fR\&.
.RE
.PP
\fB\-\-output=\fR\fI<file>\fR
.RS 4
Output to a specific file instead of stdout\&.
.RE
.PP
\fB\-\-output\-indicator\-new=\fR\fI<char>\fR, \fB\-\-output\-indicator\-old=\fR\fI<char>\fR, \fB\-\-output\-indicator\-context=\fR\fI<char>\fR
.RS 4
Specify the character used to indicate new, old or context lines in the generated patch\&. Normally they are
\fB+\fR,
\fB\-\fR
and \*(Aq \*(Aq respectively\&.
.RE
.PP
\fB\-\-raw\fR
.RS 4
For each commit, show a summary of changes using the raw diff format\&. See the "RAW OUTPUT FORMAT" section of
\fBgit-diff\fR(1)\&. This is different from showing the log itself in raw format, which you can achieve with
\fB\-\-format=raw\fR\&.
.RE
.PP
\fB\-\-patch\-with\-raw\fR
.RS 4
Synonym for
\fB\-p\fR
\fB\-\-raw\fR\&.
.RE
.PP
\fB\-t\fR
.RS 4
Show the tree objects in the diff output\&.
.RE
.PP
\fB\-\-indent\-heuristic\fR
.RS 4
Enable the heuristic that shifts diff hunk boundaries to make patches easier to read\&. This is the default\&.
.RE
.PP
\fB\-\-no\-indent\-heuristic\fR
.RS 4
Disable the indent heuristic\&.
.RE
.PP
\fB\-\-minimal\fR
.RS 4
Spend extra time to make sure the smallest possible diff is produced\&.
.RE
.PP
\fB\-\-patience\fR
.RS 4
Generate a diff using the "patience diff" algorithm\&.
.RE
.PP
\fB\-\-histogram\fR
.RS 4
Generate a diff using the "histogram diff" algorithm\&.
.RE
.PP
\fB\-\-anchored=\fR\fI<text>\fR
.RS 4
Generate a diff using the "anchored diff" algorithm\&.
.sp
This option may be specified more than once\&.
.sp
If a line exists in both the source and destination, exists only once, and starts with
\fI<text>\fR, this algorithm attempts to prevent it from appearing as a deletion or addition in the output\&. It uses the "patience diff" algorithm internally\&.
.RE
.PP
\fB\-\-diff\-algorithm=\fR(\fBpatience\fR|\fBminimal\fR|\fBhistogram\fR|\fBmyers\fR)
.RS 4
Choose a diff algorithm\&. The variants are as follows:
.PP
\fBdefault\fR, \fBmyers\fR
.RS 4
The basic greedy diff algorithm\&. Currently, this is the default\&.
.RE
.PP
\fBminimal\fR
.RS 4
Spend extra time to make sure the smallest possible diff is produced\&.
.RE
.PP
\fBpatience\fR
.RS 4
Use "patience diff" algorithm when generating patches\&.
.RE
.PP
\fBhistogram\fR
.RS 4
This algorithm extends the patience algorithm to "support low\-occurrence common elements"\&.
.RE
.sp
For instance, if you configured the
\fBdiff\&.algorithm\fR
variable to a non\-default value and want to use the default one, then you have to use
\fB\-\-diff\-algorithm=default\fR
option\&.
.RE
.PP
\fB\-\-stat\fR[\fB=\fR\fI<width>\fR[\fB,\fR\fI<name\-width>\fR[\fB,\fR\fI<count>\fR]]]
.RS 4
Generate a diffstat\&. By default, as much space as necessary will be used for the filename part, and the rest for the graph part\&. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by
\fI<width>\fR\&. The width of the filename part can be limited by giving another width
\fI<name\-width>\fR
after a comma or by setting
\fBdiff\&.statNameWidth=\fR\fI<name\-width>\fR\&. The width of the graph part can be limited by using
\fB\-\-stat\-graph\-width=\fR\fI<graph\-width>\fR
or by setting
\fBdiff\&.statGraphWidth=\fR\fI<graph\-width>\fR\&. Using
\fB\-\-stat\fR
or
\fB\-\-stat\-graph\-width\fR
affects all commands generating a stat graph, while setting
\fBdiff\&.statNameWidth\fR
or
\fBdiff\&.statGraphWidth\fR
does not affect
\fBgit\fR
\fBformat\-patch\fR\&. By giving a third parameter
\fI<count>\fR, you can limit the output to the first
\fI<count>\fR
lines, followed by
\fB\&.\&.\&.\fR
if there are more\&.
.sp
These parameters can also be set individually with
\fB\-\-stat\-width=\fR\fI<width>\fR,
\fB\-\-stat\-name\-width=\fR\fI<name\-width>\fR
and
\fB\-\-stat\-count=\fR\fI<count>\fR\&.
.RE
.PP
\fB\-\-compact\-summary\fR
.RS 4
Output a condensed summary of extended header information such as file creations or deletions ("new" or "gone", optionally
\fB+l\fR
if it\(cqs a symlink) and mode changes (\fB+x\fR
or
\fB\-x\fR
for adding or removing executable bit respectively) in diffstat\&. The information is put between the filename part and the graph part\&. Implies
\fB\-\-stat\fR\&.
.RE
.PP
\fB\-\-numstat\fR
.RS 4
Similar to
\fB\-\-stat\fR, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly\&. For binary files, outputs two
\fB\-\fR
instead of saying
\fB0\fR
\fB0\fR\&.
.RE
.PP
\fB\-\-shortstat\fR
.RS 4
Output only the last line of the
\fB\-\-stat\fR
format containing total number of modified files, as well as number of added and deleted lines\&.
.RE
.PP
\fB\-X\fR [\fI<param>\fR\fB,\fR\&.\&.\&.], \fB\-\-dirstat\fR[\fB=\fR\fI<param>\fR\fB,\fR\&.\&.\&.]
.RS 4
Output the distribution of relative amount of changes for each sub\-directory\&. The behavior of
\fB\-\-dirstat\fR
can be customized by passing it a comma separated list of parameters\&. The defaults are controlled by the
\fBdiff\&.dirstat\fR
configuration variable (see
\fBgit-config\fR(1))\&. The following parameters are available:
.PP
\fBchanges\fR
.RS 4
Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination\&. This ignores the amount of pure code movements within a file\&. In other words, rearranging lines in a file is not counted as much as other changes\&. This is the default behavior when no parameter is given\&.
.RE
.PP
\fBlines\fR
.RS 4
Compute the dirstat numbers by doing the regular line\-based diff analysis, and summing the removed/added line counts\&. (For binary files, count 64\-byte chunks instead, since binary files have no natural concept of lines)\&. This is a more expensive
\fB\-\-dirstat\fR
behavior than the
\fBchanges\fR
behavior, but it does count rearranged lines within a file as much as other changes\&. The resulting output is consistent with what you get from the other
\fB\-\-*stat\fR
options\&.
.RE
.PP
\fBfiles\fR
.RS 4
Compute the dirstat numbers by counting the number of files changed\&. Each changed file counts equally in the dirstat analysis\&. This is the computationally cheapest
\fB\-\-dirstat\fR
behavior, since it does not have to look at the file contents at all\&.
.RE
.PP
\fBcumulative\fR
.RS 4
Count changes in a child directory for the parent directory as well\&. Note that when using
\fBcumulative\fR, the sum of the percentages reported may exceed 100%\&. The default (non\-cumulative) behavior can be specified with the
\fBnoncumulative\fR
parameter\&.
.RE
.PP
\fI<limit>\fR
.RS 4
An integer parameter specifies a cut\-off percent (3% by default)\&. Directories contributing less than this percentage of the changes are not shown in the output\&.
.RE
.sp
Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories:
\fB\-\-dirstat=files\fR,10,cumulative\&.
.RE
.PP
\fB\-\-cumulative\fR
.RS 4
Synonym for
\fB\-\-dirstat=cumulative\fR\&.
.RE
.PP
\fB\-\-dirstat\-by\-file\fR[\fB=\fR\fI<param>\fR\fB,\fR\&.\&.\&.]
.RS 4
Synonym for
\fB\-\-dirstat=files\fR,\fI<param>\fR\fB,\fR\&.\&.\&.\&.
.RE
.PP
\fB\-\-summary\fR
.RS 4
Output a condensed summary of extended header information such as creations, renames and mode changes\&.
.RE
.PP
\fB\-\-patch\-with\-stat\fR
.RS 4
Synonym for
\fB\-p\fR
\fB\-\-stat\fR\&.
.RE
.PP
\fB\-z\fR
.RS 4
Separate the commits with
\fINUL\fRs instead of newlines\&.
.sp
Also, when
\fB\-\-raw\fR
or
\fB\-\-numstat\fR
has been given, do not munge pathnames and use
\fINUL\fRs as output field terminators\&.
.sp
Without this option, pathnames with "unusual" characters are quoted as explained for the configuration variable
\fBcore\&.quotePath\fR
(see
\fBgit-config\fR(1))\&.
.RE
.PP
\fB\-\-name\-only\fR
.RS 4
Show only the name of each changed file in the post\-image tree\&. The file names are often encoded in UTF\-8\&. For more information see the discussion about encoding in the
\fBgit-log\fR(1)
manual page\&.
.RE
.PP
\fB\-\-name\-status\fR
.RS 4
Show only the name(s) and status of each changed file\&. See the description of the
\fB\-\-diff\-filter\fR
option on what the status letters mean\&. Just like
\fB\-\-name\-only\fR
the file names are often encoded in UTF\-8\&.
.RE
.PP
\fB\-\-submodule\fR[\fB=\fR\fI<format>\fR]
.RS 4
Specify how differences in submodules are shown\&. When specifying
\fB\-\-submodule=short\fR
the
\fBshort\fR
format is used\&. This format just shows the names of the commits at the beginning and end of the range\&. When
\fB\-\-submodule\fR
or
\fB\-\-submodule=log\fR
is specified, the
\fBlog\fR
format is used\&. This format lists the commits in the range like
\fBgit-submodule\fR(1)
\fBsummary\fR
does\&. When
\fB\-\-submodule=diff\fR
is specified, the
\fBdiff\fR
format is used\&. This format shows an inline diff of the changes in the submodule contents between the commit range\&. Defaults to
\fBdiff\&.submodule\fR
or the
\fBshort\fR
format if the config option is unset\&.
.RE
.PP
\fB\-\-color\fR[\fB=\fR\fI<when>\fR]
.RS 4
Show colored diff\&.
\fB\-\-color\fR
(i\&.e\&. without
\fB=\fR\fI<when>\fR) is the same as
\fB\-\-color=always\fR\&.
\fI<when>\fR
can be one of
\fBalways\fR,
\fBnever\fR, or
\fBauto\fR\&.
.RE
.PP
\fB\-\-no\-color\fR
.RS 4
Turn off colored diff\&. It is the same as
\fB\-\-color=never\fR\&.
.RE
.PP
\fB\-\-color\-moved\fR[\fB=\fR\fI<mode>\fR]
.RS 4
Moved lines of code are colored differently\&. The
\fI<mode>\fR
defaults to
\fBno\fR
if the option is not given and to
\fBzebra\fR
if the option with no mode is given\&. The mode must be one of:
.PP
\fBno\fR
.RS 4
Moved lines are not highlighted\&.
.RE
.PP
\fBdefault\fR
.RS 4
Is a synonym for
\fBzebra\fR\&. This may change to a more sensible mode in the future\&.
.RE
.PP
\fBplain\fR
.RS 4
Any line that is added in one location and was removed in another location will be colored with
\fBcolor\&.diff\&.newMoved\fR\&. Similarly
\fBcolor\&.diff\&.oldMoved\fR
will be used for removed lines that are added somewhere else in the diff\&. This mode picks up any moved line, but it is not very useful in a review to determine if a block of code was moved without permutation\&.
.RE
.PP
\fBblocks\fR
.RS 4
Blocks of moved text of at least 20 alphanumeric characters are detected greedily\&. The detected blocks are painted using either the
\fBcolor\&.diff\&.\fR(\fBold\fR|\fBnew\fR)\fBMoved\fR
color\&. Adjacent blocks cannot be told apart\&.
.RE
.PP
\fBzebra\fR
.RS 4
Blocks of moved text are detected as in
\fBblocks\fR
mode\&. The blocks are painted using either the
\fBcolor\&.diff\&.\fR(\fBold\fR|\fBnew\fR)\fBMoved\fR
color or
\fBcolor\&.diff\&.\fR(\fBold\fR|\fBnew\fR)\fBMovedAlternative\fR\&. The change between the two colors indicates that a new block was detected\&.
.RE
.PP
\fBdimmed\-zebra\fR
.RS 4
Similar to
\fBzebra\fR, but additional dimming of uninteresting parts of moved code is performed\&. The bordering lines of two adjacent blocks are considered interesting, the rest is uninteresting\&.
\fBdimmed_zebra\fR
is a deprecated synonym\&.
.RE
.RE
.PP
\fB\-\-no\-color\-moved\fR
.RS 4
Turn off move detection\&. This can be used to override configuration settings\&. It is the same as
\fB\-\-color\-moved=no\fR\&.
.RE
.PP
\fB\-\-color\-moved\-ws=\fR\fI<mode>\fR\fB,\fR\&.\&.\&.
.RS 4
This configures how whitespace is ignored when performing the move detection for
\fB\-\-color\-moved\fR\&. These modes can be given as a comma separated list:
.PP
\fBno\fR
.RS 4
Do not ignore whitespace when performing move detection\&.
.RE
.PP
\fBignore\-space\-at\-eol\fR
.RS 4
Ignore changes in whitespace at EOL\&.
.RE
.PP
\fBignore\-space\-change\fR
.RS 4
Ignore changes in amount of whitespace\&. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent\&.
.RE
.PP
\fBignore\-all\-space\fR
.RS 4
Ignore whitespace when comparing lines\&. This ignores differences even if one line has whitespace where the other line has none\&.
.RE
.PP
\fBallow\-indentation\-change\fR
.RS 4
Initially ignore any whitespace in the move detection, then group the moved code blocks only into a block if the change in whitespace is the same per line\&. This is incompatible with the other modes\&.
.RE
.RE
.PP
\fB\-\-no\-color\-moved\-ws\fR
.RS 4
Do not ignore whitespace when performing move detection\&. This can be used to override configuration settings\&. It is the same as
\fB\-\-color\-moved\-ws=no\fR\&.
.RE
.PP
\fB\-\-word\-diff\fR[\fB=\fR\fI<mode>\fR]
.RS 4
By default, words are delimited by whitespace; see
\fB\-\-word\-diff\-regex\fR
below\&. The
\fI<mode>\fR
defaults to
\fBplain\fR, and must be one of:
.PP
\fBcolor\fR
.RS 4
Highlight changed words using only colors\&. Implies
\fB\-\-color\fR\&.
.RE
.PP
\fBplain\fR
.RS 4
Show words as [\fB\-removed\-\fR] and {\fBadded\fR}\&. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous\&.
.RE
.PP
\fBporcelain\fR
.RS 4
Use a special line\-based format intended for script consumption\&. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a
\fB+\fR/\fB\-\fR/` ` character at the beginning of the line and extending to the end of the line\&. Newlines in the input are represented by a tilde
\fB~\fR
on a line of its own\&.
.RE
.PP
\fBnone\fR
.RS 4
Disable word diff again\&.
.RE
.sp
Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled\&.
.RE
.PP
\fB\-\-word\-diff\-regex=\fR\fI<regex>\fR
.RS 4
Use
\fI<regex>\fR
to decide what a word is, instead of considering runs of non\-whitespace to be a word\&. Also implies
\fB\-\-word\-diff\fR
unless it was already enabled\&.
.sp
Every non\-overlapping match of the
\fI<regex>\fR
is considered a word\&. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences\&. You may want to append |[\fB^\fR[\fB:space:\fR]] to your regular expression to make sure that it matches all non\-whitespace characters\&. A match that contains a newline is silently truncated(!) at the newline\&.
.sp
For example,
\fB\-\-word\-diff\-regex=\&.\fR
will treat each character as a word and, correspondingly, show differences character by character\&.
.sp
The regex can also be set via a diff driver or configuration option, see
\fBgitattributes\fR(5)
or
\fBgit-config\fR(1)\&. Giving it explicitly overrides any diff driver or configuration setting\&. Diff drivers override configuration settings\&.
.RE
.PP
\fB\-\-color\-words\fR[\fB=\fR\fI<regex>\fR]
.RS 4
Equivalent to
\fB\-\-word\-diff=color\fR
plus (if a regex was specified)
\fB\-\-word\-diff\-regex=\fR\fI<regex>\fR\&.
.RE
.PP
\fB\-\-no\-renames\fR
.RS 4
Turn off rename detection, even when the configuration file gives the default to do so\&.
.RE
.PP
\fB\-\-rename\-empty\fR, \fB\-\-no\-rename\-empty\fR
.RS 4
Whether to use empty blobs as rename source\&.
.RE
.PP
\fB\-\-check\fR
.RS 4
Warn if changes introduce conflict markers or whitespace errors\&. What are considered whitespace errors is controlled by
\fBcore\&.whitespace\fR
configuration\&. By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors\&. Exits with non\-zero status if problems are found\&. Not compatible with
\fB\-\-exit\-code\fR\&.
.RE
.PP
\fB\-\-ws\-error\-highlight=\fR\fI<kind>\fR
.RS 4
Highlight whitespace errors in the
\fBcontext\fR,
\fBold\fR
or
\fBnew\fR
lines of the diff\&. Multiple values are separated by comma,
\fBnone\fR
resets previous values,
\fBdefault\fR
reset the list to
\fBnew\fR
and
\fBall\fR
is a shorthand for
\fBold\fR,new,context\&. When this option is not given, and the configuration variable
\fBdiff\&.wsErrorHighlight\fR
is not set, only whitespace errors in
\fBnew\fR
lines are highlighted\&. The whitespace errors are colored with
\fBcolor\&.diff\&.whitespace\fR\&.
.RE
.PP
\fB\-\-full\-index\fR
.RS 4
Instead of the first handful of characters, show the full pre\- and post\-image blob object names on the "index" line when generating patch format output\&.
.RE
.PP
\fB\-\-binary\fR
.RS 4
In addition to
\fB\-\-full\-index\fR, output a binary diff that can be applied with
\fBgit\-apply\fR\&. Implies
\fB\-\-patch\fR\&.
.RE
.PP
\fB\-\-abbrev\fR[\fB=\fR\fI<n>\fR]
.RS 4
Instead of showing the full 40\-byte hexadecimal object name in diff\-raw format output and diff\-tree header lines, show the shortest prefix that is at least
\fI<n>\fR
hexdigits long that uniquely refers the object\&. In diff\-patch output format,
\fB\-\-full\-index\fR
takes higher precedence, i\&.e\&. if
\fB\-\-full\-index\fR
is specified, full blob names will be shown regardless of
\fB\-\-abbrev\fR\&. Non default number of digits can be specified with
\fB\-\-abbrev=\fR\fI<n>\fR\&.
.RE
.PP
\fB\-B\fR[\fI<n>\fR][\fB/\fR\fI<m>\fR], \fB\-\-break\-rewrites\fR[\fB=\fR[\fI<n>\fR][\fB/\fR\fI<m>\fR]]
.RS 4
Break complete rewrite changes into pairs of delete and create\&. This serves two purposes:
.sp
It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number
\fI<m>\fR
controls this aspect of the
\fB\-B\fR
option (defaults to 60%)\&.
\fB\-B/70%\fR
specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i\&.e\&. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines)\&.
.sp
When used with
\fB\-M\fR, a totally\-rewritten file is also considered as the source of a rename (usually
\fB\-M\fR
only considers a file that disappeared as the source of a rename), and the number
\fI<n>\fR
controls this aspect of the
\fB\-B\fR
option (defaults to 50%)\&.
\fB\-B20%\fR
specifies that a change with addition and deletion compared to 20% or more of the file\(cqs size are eligible for being picked up as a possible source of a rename to another file\&.
.RE
.PP
\fB\-M\fR[\fI<n>\fR], \fB\-\-find\-renames\fR[\fB=\fR\fI<n>\fR]
.RS 4
If generating diffs, detect and report renames for each commit\&. For following files across renames while traversing history, see
\fB\-\-follow\fR\&. If
\fI<n>\fR
is specified, it is a threshold on the similarity index (i\&.e\&. amount of addition/deletions compared to the file\(cqs size)\&. For example,
\fB\-M90%\fR
means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn\(cqt changed\&. Without a
\fB%\fR
sign, the number is to be read as a fraction, with a decimal point before it\&. I\&.e\&.,
\fB\-M5\fR
becomes 0\&.5, and is thus the same as
\fB\-M50%\fR\&. Similarly,
\fB\-M05\fR
is the same as
\fB\-M5%\fR\&. To limit detection to exact renames, use
\fB\-M100%\fR\&. The default similarity index is 50%\&.
.RE
.PP
\fB\-C\fR[\fI<n>\fR], \fB\-\-find\-copies\fR[\fB=\fR\fI<n>\fR]
.RS 4
Detect copies as well as renames\&. See also
\fB\-\-find\-copies\-harder\fR\&. If
\fI<n>\fR
is specified, it has the same meaning as for
\fB\-M\fR\fI<n>\fR\&.
.RE
.PP
\fB\-\-find\-copies\-harder\fR
.RS 4
For performance reasons, by default,
\fB\-C\fR
option finds copies only if the original file of the copy was modified in the same changeset\&. This flag makes the command inspect unmodified files as candidates for the source of copy\&. This is a very expensive operation for large projects, so use it with caution\&. Giving more than one
\fB\-C\fR
option has the same effect\&.
.RE
.PP
\fB\-D\fR, \fB\-\-irreversible\-delete\fR
.RS 4
Omit the preimage for deletes, i\&.e\&. print only the header but not the diff between the preimage and
\fB/dev/null\fR\&. The resulting patch is not meant to be applied with
\fBpatch\fR
or
\fBgit\fR
\fBapply\fR; this is solely for people who want to just concentrate on reviewing the text after the change\&. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option\&.
.sp
When used together with
\fB\-B\fR, omit also the preimage in the deletion part of a delete/create pair\&.
.RE
.PP
\fB\-l\fR\fI<num>\fR
.RS 4
The
\fB\-M\fR
and
\fB\-C\fR
options involve some preliminary steps that can detect subsets of renames/copies cheaply, followed by an exhaustive fallback portion that compares all remaining unpaired destinations to all relevant sources\&. (For renames, only remaining unpaired sources are relevant; for copies, all original sources are relevant\&.) For N sources and destinations, this exhaustive check is O(N^2)\&. This option prevents the exhaustive portion of rename/copy detection from running if the number of source/destination files involved exceeds the specified number\&. Defaults to
\fBdiff\&.renameLimit\fR\&. Note that a value of 0 is treated as unlimited\&.
.RE
.PP
\fB\-\-diff\-filter=\fR[(\fBA\fR|\fBC\fR|\fBD\fR|\fBM\fR|\fBR\fR|\fBT\fR|\fBU\fR|\fBX\fR|\fBB\fR)\fB\&.\&.\&.\fR[\fB*\fR]]
.RS 4
Select only files that are Added (\fBA\fR), Copied (\fBC\fR), Deleted (\fBD\fR), Modified (\fBM\fR), Renamed (\fBR\fR), have their type (i\&.e\&. regular file, symlink, submodule, \&...\:) changed (\fBT\fR), are Unmerged (\fBU\fR), are Unknown (\fBX\fR), or have had their pairing Broken (\fBB\fR)\&. Any combination of the filter characters (including none) can be used\&. When
\fB*\fR
(All\-or\-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected\&.
.sp
Also, these upper\-case letters can be downcased to exclude\&. E\&.g\&.
\fB\-\-diff\-filter=ad\fR
excludes added and deleted paths\&.
.sp
Note that not all diffs can feature all types\&. For instance, copied and renamed entries cannot appear if detection for those types is disabled\&.
.RE
.PP
\fB\-S\fR\fI<string>\fR
.RS 4
Look for differences that change the number of occurrences of the specified
\fI<string>\fR
(i\&.e\&. addition/deletion) in a file\&. Intended for the scripter\(cqs use\&.
.sp
It is useful when you\(cqre looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into
\fB\-S\fR, and keep going until you get the very first version of the block\&.
.sp
Binary files are searched as well\&.
.RE
.PP
\fB\-G\fR\fI<regex>\fR
.RS 4
Look for differences whose patch text contains added/removed lines that match
\fI<regex>\fR\&.
.sp
To illustrate the difference between
\fB\-S\fR\fI<regex>\fR
\fB\-\-pickaxe\-regex\fR
and
\fB\-G\fR\fI<regex>\fR, consider a commit with the following diff in the same file:
.sp
.if n \{\
.RS 4
.\}
.nf
+    return frotz(nitfol, two\->ptr, 1, 0);
\&.\&.\&.
\-    hit = frotz(nitfol, mf2\&.ptr, 1, 0);
.fi
.if n \{\
.RE
.\}
.sp
While
\fBgit\fR
\fBlog\fR
\fB\-G\fR"frotz\e(\fBnitfol\fR" will show this commit,
\fBgit\fR
\fBlog\fR
\fB\-S\fR"frotz\e(\fBnitfol\fR"
\fB\-\-pickaxe\-regex\fR
will not (because the number of occurrences of that string did not change)\&.
.sp
Unless
\fB\-\-text\fR
is supplied patches of binary files without a textconv filter will be ignored\&.
.sp
See the
\fIpickaxe\fR
entry in
\fBgitdiffcore\fR(7)
for more information\&.
.RE
.PP
\fB\-\-find\-object=\fR\fI<object\-id>\fR
.RS 4
Look for differences that change the number of occurrences of the specified object\&. Similar to
\fB\-S\fR, just the argument is different in that it doesn\(cqt search for a specific string but for a specific object id\&.
.sp
The object can be a blob or a submodule commit\&. It implies the
\fB\-t\fR
option in
\fBgit\-log\fR
to also find trees\&.
.RE
.PP
\fB\-\-pickaxe\-all\fR
.RS 4
When
\fB\-S\fR
or
\fB\-G\fR
finds a change, show all the changes in that changeset, not just the files that contain the change in
\fI<string>\fR\&.
.RE
.PP
\fB\-\-pickaxe\-regex\fR
.RS 4
Treat the
\fI<string>\fR
given to
\fB\-S\fR
as an extended POSIX regular expression to match\&.
.RE
.PP
\fB\-O\fR\fI<orderfile>\fR
.RS 4
Control the order in which files appear in the output\&. This overrides the
\fBdiff\&.orderFile\fR
configuration variable (see
\fBgit-config\fR(1))\&. To cancel
\fBdiff\&.orderFile\fR, use
\fB\-O/dev/null\fR\&.
.sp
The output order is determined by the order of glob patterns in
\fI<orderfile>\fR\&. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on\&. All files with pathnames that do not match any pattern are output last, as if there was an implicit match\-all pattern at the end of the file\&. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order\&.
.sp
\fI<orderfile>\fR
is parsed as follows:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Blank lines are ignored, so they can be used as separators for readability\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Lines starting with a hash ("#") are ignored, so they can be used for comments\&. Add a backslash ("\fB\e\fR") to the beginning of the pattern if it starts with a hash\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Each other line contains a single pattern\&.
.RE
.sp
Patterns have the same syntax and semantics as patterns used for
\fBfnmatch\fR(3) without the
\fBFNM_PATHNAME\fR
flag, except a pathname also matches a pattern if removing any number of the final pathname components matches the pattern\&. For example, the pattern "\fBfoo*bar\fR" matches "\fBfooasdfbar\fR" and "\fBfoo/bar/baz/asdf\fR" but not "\fBfoobarx\fR"\&.
.RE
.PP
\fB\-\-skip\-to=\fR\fI<file>\fR, \fB\-\-rotate\-to=\fR\fI<file>\fR
.RS 4
Discard the files before the named
\fI<file>\fR
from the output (i\&.e\&.
\fIskip to\fR), or move them to the end of the output (i\&.e\&.
\fIrotate to\fR)\&. These options were invented primarily for the use of the
\fBgit\fR
\fBdifftool\fR
command, and may not be very useful otherwise\&.
.RE
.PP
\fB\-R\fR
.RS 4
Swap two inputs; that is, show differences from index or on\-disk file to tree contents\&.
.RE
.PP
\fB\-\-relative\fR[\fB=\fR\fI<path>\fR], \fB\-\-no\-relative\fR
.RS 4
When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option\&. When you are not in a subdirectory (e\&.g\&. in a bare repository), you can name which subdirectory to make the output relative to by giving a
\fI<path>\fR
as an argument\&.
\fB\-\-no\-relative\fR
can be used to countermand both
\fBdiff\&.relative\fR
config option and previous
\fB\-\-relative\fR\&.
.RE
.PP
\fB\-a\fR, \fB\-\-text\fR
.RS 4
Treat all files as text\&.
.RE
.PP
\fB\-\-ignore\-cr\-at\-eol\fR
.RS 4
Ignore carriage\-return at the end of line when doing a comparison\&.
.RE
.PP
\fB\-\-ignore\-space\-at\-eol\fR
.RS 4
Ignore changes in whitespace at EOL\&.
.RE
.PP
\fB\-b\fR, \fB\-\-ignore\-space\-change\fR
.RS 4
Ignore changes in amount of whitespace\&. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent\&.
.RE
.PP
\fB\-w\fR, \fB\-\-ignore\-all\-space\fR
.RS 4
Ignore whitespace when comparing lines\&. This ignores differences even if one line has whitespace where the other line has none\&.
.RE
.PP
\fB\-\-ignore\-blank\-lines\fR
.RS 4
Ignore changes whose lines are all blank\&.
.RE
.PP
\fB\-I\fR\fI<regex>\fR, \fB\-\-ignore\-matching\-lines=\fR\fI<regex>\fR
.RS 4
Ignore changes whose all lines match
\fI<regex>\fR\&. This option may be specified more than once\&.
.RE
.PP
\fB\-\-inter\-hunk\-context=\fR\fI<number>\fR
.RS 4
Show the context between diff hunks, up to the specified
\fI<number>\fR
of lines, thereby fusing hunks that are close to each other\&. Defaults to
\fBdiff\&.interHunkContext\fR
or 0 if the config option is unset\&.
.RE
.PP
\fB\-W\fR, \fB\-\-function\-context\fR
.RS 4
Show whole function as context lines for each change\&. The function names are determined in the same way as
\fBgit\fR
\fBdiff\fR
works out patch hunk headers (see "Defining a custom hunk\-header" in
\fBgitattributes\fR(5))\&.
.RE
.PP
\fB\-\-ext\-diff\fR
.RS 4
Allow an external diff helper to be executed\&. If you set an external diff driver with
\fBgitattributes\fR(5), you need to use this option with
\fBgit-log\fR(1)
and friends\&.
.RE
.PP
\fB\-\-no\-ext\-diff\fR
.RS 4
Disallow external diff drivers\&.
.RE
.PP
\fB\-\-textconv\fR, \fB\-\-no\-textconv\fR
.RS 4
Allow (or disallow) external text conversion filters to be run when comparing binary files\&. See
\fBgitattributes\fR(5)
for details\&. Because textconv filters are typically a one\-way conversion, the resulting diff is suitable for human consumption, but cannot be applied\&. For this reason, textconv filters are enabled by default only for
\fBgit-diff\fR(1)
and
\fBgit-log\fR(1), but not for
\fBgit-format-patch\fR(1)
or diff plumbing commands\&.
.RE
.PP
\fB\-\-ignore\-submodules\fR[\fB=\fR(\fBnone\fR|\fBuntracked\fR|\fBdirty\fR|\fBall\fR)]
.RS 4
Ignore changes to submodules in the diff generation\&.
\fBall\fR
is the default\&. Using
\fBnone\fR
will consider the submodule modified when it either contains untracked or modified files or its
\fBHEAD\fR
differs from the commit recorded in the superproject and can be used to override any settings of the
\fBignore\fR
option in
\fBgit-config\fR(1)
or
\fBgitmodules\fR(5)\&. When
\fBuntracked\fR
is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content)\&. Using
\fBdirty\fR
ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1\&.7\&.0)\&. Using
\fBall\fR
hides all changes to submodules\&.
.RE
.PP
\fB\-\-src\-prefix=\fR\fI<prefix>\fR
.RS 4
Show the given source
\fI<prefix>\fR
instead of "a/"\&.
.RE
.PP
\fB\-\-dst\-prefix=\fR\fI<prefix>\fR
.RS 4
Show the given destination
\fI<prefix>\fR
instead of "b/"\&.
.RE
.PP
\fB\-\-no\-prefix\fR
.RS 4
Do not show any source or destination prefix\&.
.RE
.PP
\fB\-\-default\-prefix\fR
.RS 4
Use the default source and destination prefixes ("a/" and "b/")\&. This overrides configuration variables such as
\fBdiff\&.noprefix\fR,
\fBdiff\&.srcPrefix\fR,
\fBdiff\&.dstPrefix\fR, and
\fBdiff\&.mnemonicPrefix\fR
(see
\fBgit-config\fR(1))\&.
.RE
.PP
\fB\-\-line\-prefix=\fR\fI<prefix>\fR
.RS 4
Prepend an additional
\fI<prefix>\fR
to every line of output\&.
.RE
.PP
\fB\-\-ita\-invisible\-in\-index\fR
.RS 4
By default entries added by
\fBgit\fR
\fBadd\fR
\fB\-N\fR
appear as an existing empty file in
\fBgit\fR
\fBdiff\fR
and a new file in
\fBgit\fR
\fBdiff\fR
\fB\-\-cached\fR\&. This option makes the entry appear as a new file in
\fBgit\fR
\fBdiff\fR
and non\-existent in
\fBgit\fR
\fBdiff\fR
\fB\-\-cached\fR\&. This option could be reverted with
\fB\-\-ita\-visible\-in\-index\fR\&. Both options are experimental and could be removed in future\&.
.RE
.PP
\-\-max\-depth=<depth>
.RS 4
For each pathspec given on command line, descend at most
\fI<depth>\fR
levels of directories\&. A value of
\fB\-1\fR
means no limit\&. Cannot be combined with wildcards in the pathspec\&. Given a tree containing
\fBfoo/bar/baz\fR, the following list shows the matches generated by each set of options:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-max\-depth=0\fR
\fB\-\-\fR
\fBfoo\fR:
\fBfoo\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-max\-depth=1\fR
\fB\-\-\fR
\fBfoo\fR:
\fBfoo/bar\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-max\-depth=1\fR
\fB\-\-\fR
\fBfoo/bar\fR:
\fBfoo/bar/baz\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-max\-depth=1\fR
\fB\-\-\fR
\fBfoo\fR
\fBfoo/bar\fR:
\fBfoo/bar/baz\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-max\-depth=2\fR
\fB\-\-\fR
\fBfoo\fR:
\fBfoo/bar/baz\fR
.RE
.sp
If no pathspec is given, the depth is measured as if all top\-level entries were specified\&. Note that this is different than measuring from the root, in that
\fB\-\-max\-depth=0\fR
would still return
\fBfoo\fR\&. This allows you to still limit depth while asking for a subset of the top\-level entries\&.
.sp
Note that this option is only supported for diffs between tree objects, not against the index or working tree\&.
.RE
.sp
For more detailed explanation on these common options, see also \fBgitdiffcore\fR(7)\&.
.SH "GENERATING PATCH TEXT WITH \-P"
.sp
Running \fBgit-diff\fR(1), \fBgit-log\fR(1), \fBgit-show\fR(1), \fBgit-diff-index\fR(1), \fBgit-diff-tree\fR(1), or \fBgit-diff-files\fR(1) with the \fB\-p\fR option produces patch text\&. You can customize the creation of patch text via the \fBGIT_EXTERNAL_DIFF\fR and the \fBGIT_DIFF_OPTS\fR environment variables (see \fBgit\fR(1)), and the \fBdiff\fR attribute (see \fBgitattributes\fR(5))\&.
.sp
What the \fB\-p\fR option produces is slightly different from the traditional diff format:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
It is preceded by a "git diff" header that looks like this:
.sp
.if n \{\
.RS 4
.\}
.nf
diff \-\-git a/file1 b/file2
.fi
.if n \{\
.RE
.\}
.sp
The
\fBa/\fR
and
\fBb/\fR
filenames are the same unless rename/copy is involved\&. Especially, even for a creation or a deletion,
\fB/dev/null\fR
is
\fInot\fR
used in place of the
\fBa/\fR
or
\fBb/\fR
filenames\&.
.sp
When a rename/copy is involved,
\fBfile1\fR
and
\fBfile2\fR
show the name of the source file of the rename/copy and the name of the file that the rename/copy produces, respectively\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
It is followed by one or more extended header lines:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBold\fR \fBmode\fR \fI<mode>\fR
\fBnew\fR \fBmode\fR \fI<mode>\fR
\fBdeleted\fR \fBfile\fR \fBmode\fR \fI<mode>\fR
\fBnew\fR \fBfile\fR \fBmode\fR \fI<mode>\fR
\fBcopy\fR \fBfrom\fR \fI<path>\fR
\fBcopy\fR \fBto\fR \fI<path>\fR
\fBrename\fR \fBfrom\fR \fI<path>\fR
\fBrename\fR \fBto\fR \fI<path>\fR
\fBsimilarity\fR \fBindex\fR \fI<number>\fR
\fBdissimilarity\fR \fBindex\fR \fI<number>\fR
\fBindex\fR \fI<hash>\fR\fB\&.\&.\fR\fI<hash>\fR \fI<mode>\fR
.fi
.if n \{\
.RE
.\}
File modes
\fI<mode>\fR
are printed as 6\-digit octal numbers including the file type and file permission bits\&.
.sp
Path names in extended headers do not include the
\fBa/\fR
and
\fBb/\fR
prefixes\&.
.sp
The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines\&. It is a rounded down integer, followed by a percent sign\&. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one\&.
.sp
The index line includes the blob object names before and after the change\&. The
\fI<mode>\fR
is included if the file mode does not change; otherwise, separate lines indicate the old and the new mode\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Pathnames with "unusual" characters are quoted as explained for the configuration variable
\fBcore\&.quotePath\fR
(see
\fBgit-config\fR(1))\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
All the
\fBfile1\fR
files in the output refer to files before the commit, and all the
\fBfile2\fR
files refer to files after the commit\&. It is incorrect to apply each change to each file sequentially\&. For example, this patch will swap a and b:
.sp
.if n \{\
.RS 4
.\}
.nf
diff \-\-git a/a b/b
rename from a
rename to b
diff \-\-git a/b b/a
rename from b
rename to a
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
Hunk headers mention the name of the function to which the hunk applies\&. See "Defining a custom hunk\-header" in
\fBgitattributes\fR(5)
for details of how to tailor this to specific languages\&.
.RE
.SH "COMBINED DIFF FORMAT"
.sp
Any diff\-generating command can take the \fB\-c\fR or \fB\-\-cc\fR option to produce a \fIcombined diff\fR when showing a merge\&. This is the default format when showing merges with \fBgit-diff\fR(1) or \fBgit-show\fR(1)\&. Note also that you can give suitable \fB\-\-diff\-merges\fR option to any of these commands to force generation of diffs in a specific format\&.
.sp
A "combined diff" format looks like this:
.sp
.if n \{\
.RS 4
.\}
.nf
diff \-\-combined describe\&.c
index fabadb8,cc95eb0\&.\&.4866510
\-\-\- a/describe\&.c
+++ b/describe\&.c
@@@ \-98,20 \-98,12 +98,20 @@@
        return (a_date > b_date) ? \-1 : (a_date == b_date) ? 0 : 1;
  }

\- static void describe(char *arg)
 \-static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) {
                initialized = 1;
                for_each_ref(get_name);
.fi
.if n \{\
.RE
.\}
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
It is preceded by a "git diff" header, that looks like this (when the
\fB\-c\fR
option is used):
.sp
.if n \{\
.RS 4
.\}
.nf
diff \-\-combined file
.fi
.if n \{\
.RE
.\}
.sp
or like this (when the
\fB\-\-cc\fR
option is used):
.sp
.if n \{\
.RS 4
.\}
.nf
diff \-\-cc file
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
It is followed by one or more extended header lines (this example shows a merge with two parents):
.sp
.if n \{\
.RS 4
.\}
.nf
\fBindex\fR \fI<hash>\fR\fB,\fR\fI<hash>\fR\fB\&.\&.\fR\fI<hash>\fR
\fBmode\fR \fI<mode>\fR\fB,\fR\fI<mode>\fR\fB\&.\&.\fR\fI<mode>\fR
\fBnew\fR \fBfile\fR \fBmode\fR \fI<mode>\fR
\fBdeleted\fR \fBfile\fR \fBmode\fR \fI<mode>\fR\fB,\fR\fI<mode>\fR
.fi
.if n \{\
.RE
.\}
The
\fBmode\fR
\fI<mode>\fR\fB,\fR\fI<mode>\fR\fB\&.\&.\fR\fI<mode>\fR
line appears only if at least one of the <mode> is different from the rest\&. Extended headers with information about detected content movement (renames and copying detection) are designed to work with the diff of two
\fI<tree\-ish>\fR
and are not used by combined diff format\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
It is followed by a two\-line from\-file/to\-file header:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\- a/file
+++ b/file
.fi
.if n \{\
.RE
.\}
.sp
Similar to the two\-line header for the traditional
\fIunified\fR
diff format,
\fB/dev/null\fR
is used to signal created or deleted files\&.
.sp
However, if the \-\-combined\-all\-paths option is provided, instead of a two\-line from\-file/to\-file, you get an N+1 line from\-file/to\-file header, where N is the number of parents in the merge commit:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\- a/file
\-\-\- a/file
\-\-\- a/file
+++ b/file
.fi
.if n \{\
.RE
.\}
.sp
This extended format can be useful if rename or copy detection is active, to allow you to see the original name of the file in different parents\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Chunk header format is modified to prevent people from accidentally feeding it to
\fBpatch\fR
\fB\-p1\fR\&. Combined diff format was created for review of merge commit changes, and was not meant to be applied\&. The change is similar to the change in the extended
\fIindex\fR
header:
.sp
.if n \{\
.RS 4
.\}
.nf
@@@ <from\-file\-range> <from\-file\-range> <to\-file\-range> @@@
.fi
.if n \{\
.RE
.\}
.sp
There are (number of parents + 1)
\fB@\fR
characters in the chunk header for combined diff format\&.
.RE
.sp
Unlike the traditional \fIunified\fR diff format, which shows two files A and B with a single column that has \fB\-\fR (minus \(em appears in A but removed in B), \fB+\fR (plus \(em missing in A but added to B), or " " (space \(em unchanged) prefix, this format compares two or more files file1, file2,\&...\: with one file X, and shows how X differs from each of fileN\&. One column for each of fileN is prepended to the output line to note how X\(cqs line is different from it\&.
.sp
A \fB\-\fR character in the column N means that the line appears in fileN but it does not appear in the result\&. A \fB+\fR character in the column N means that the line appears in the result, and fileN does not have that line (in other words, the line was added, from the point of view of that parent)\&.
.sp
In the above example output, the function signature was changed from both files (hence two \fB\-\fR removals from both file1 and file2, plus \fB++\fR to mean one line that was added does not appear in either file1 or file2)\&. Also, eight other lines are the same from file1 but do not appear in file2 (hence prefixed with \fB+\fR)\&.
.sp
When shown by \fBgit\fR \fBdiff\-tree\fR \fB\-c\fR, it compares the parents of a merge commit with the merge result (i\&.e\&. file1\&.\&.fileN are the parents)\&. When shown by \fBgit\fR \fBdiff\-files\fR \fB\-c\fR, it compares the two unresolved merge parents with the working tree file (i\&.e\&. file1 is stage 2 aka "our version", file2 is stage 3 aka "their version")\&.
.SH "EXAMPLES"
.PP
\fBgit\fR \fBshow\fR \fBv1\&.0\&.0\fR
.RS 4
Shows the tag
\fBv1\&.0\&.0\fR, along with the object the tag points at\&.
.RE
.PP
\fBgit\fR \fBshow\fR \fBv1\&.0\&.0^\fR{tree}
.RS 4
Shows the tree pointed to by the tag
\fBv1\&.0\&.0\fR\&.
.RE
.PP
\fBgit\fR \fBshow\fR \fB\-s\fR \fB\-\-format=%s\fR \fBv1\&.0\&.0^\fR{commit}
.RS 4
Shows the subject of the commit pointed to by the tag
\fBv1\&.0\&.0\fR\&.
.RE
.PP
\fBgit\fR \fBshow\fR \fBnext~10:Documentation/README\fR
.RS 4
Shows the contents of the file
\fBDocumentation/README\fR
as they were current in the 10th last commit of the branch
\fBnext\fR\&.
.RE
.PP
\fBgit\fR \fBshow\fR \fBmaster:Makefile\fR \fBmaster:t/Makefile\fR
.RS 4
Concatenates the contents of said Makefiles in the head of the branch
\fBmaster\fR\&.
.RE
.SH "DISCUSSION"
.sp
Git is to some extent character encoding agnostic\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The contents of the blob objects are uninterpreted sequences of bytes\&. There is no encoding translation at the core level\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Path names are encoded in UTF\-8 normalization form C\&. This applies to tree objects, the index file, ref names, as well as path names in command line arguments, environment variables and config files (\&.\fBgit/config\fR
(see
\fBgit-config\fR(1)),
\fBgitignore\fR(5),
\fBgitattributes\fR(5)
and
\fBgitmodules\fR(5))\&.
.sp
Note that Git at the core level treats path names simply as sequences of non\-NUL bytes, there are no path name encoding conversions (except on Mac and Windows)\&. Therefore, using non\-ASCII path names will mostly work even on platforms and file systems that use legacy extended ASCII encodings\&. However, repositories created on such systems will not work properly on UTF\-8\-based systems (e\&.g\&. Linux, Mac, Windows) and vice versa\&. Additionally, many Git\-based tools simply assume path names to be UTF\-8 and will fail to display other encodings correctly\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Commit log messages are typically encoded in UTF\-8, but other extended ASCII encodings are also supported\&. This includes ISO\-8859\-x, CP125x and many others, but
\fInot\fR
UTF\-16/32, EBCDIC and CJK multi\-byte encodings (GBK, Shift\-JIS, Big5, EUC\-x, CP9xx etc\&.)\&.
.RE
.sp
Although we encourage that the commit log messages are encoded in UTF\-8, both the core and Git Porcelain are designed not to force UTF\-8 on projects\&. If all participants of a particular project find it more convenient to use legacy encodings, Git does not forbid it\&. However, there are a few things to keep in mind\&.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBgit\fR
\fBcommit\fR
and
\fBgit\fR
\fBcommit\-tree\fR
issue a warning if the commit log message given to it does not look like a valid UTF\-8 string, unless you explicitly say your project uses a legacy encoding\&. The way to say this is to have
\fBi18n\&.commitEncoding\fR
in \&.\fBgit/config\fR
file, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
[i18n]
        commitEncoding = ISO\-8859\-1
.fi
.if n \{\
.RE
.\}
.sp
Commit objects created with the above setting record the value of
\fBi18n\&.commitEncoding\fR
in their
\fBencoding\fR
header\&. This is to help other people who look at them later\&. Lack of this header implies that the commit log message is encoded in UTF\-8\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBgit\fR
\fBlog\fR,
\fBgit\fR
\fBshow\fR,
\fBgit\fR
\fBblame\fR
and friends look at the
\fBencoding\fR
header of a commit object, and try to re\-code the log message into UTF\-8 unless otherwise specified\&. You can specify the desired output encoding with
\fBi18n\&.logOutputEncoding\fR
in \&.\fBgit/config\fR
file, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
[i18n]
        logOutputEncoding = ISO\-8859\-1
.fi
.if n \{\
.RE
.\}
.sp
If you do not have this configuration variable, the value of
\fBi18n\&.commitEncoding\fR
is used instead\&.
.RE
.sp
Note that we deliberately chose not to re\-code the commit log message when a commit is made to force UTF\-8 at the commit object level, because re\-coding to UTF\-8 is not necessarily a reversible operation\&.
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
