'\" t
.\"     Title: git-merge
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 2024-07-29
.\"    Manual: Git Manual
.\"    Source: Git 2.46.0
.\"  Language: English
.\"
.TH "GIT\-MERGE" "1" "2024\-07\-29" "Git 2\&.46\&.0" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-merge \- Join two or more development histories together
.SH "SYNOPSIS"
.sp
.nf
\fIgit merge\fR [\-n] [\-\-stat] [\-\-no\-commit] [\-\-squash] [\-\-[no\-]edit]
        [\-\-no\-verify] [\-s <strategy>] [\-X <strategy\-option>] [\-S[<keyid>]]
        [\-\-[no\-]allow\-unrelated\-histories]
        [\-\-[no\-]rerere\-autoupdate] [\-m <msg>] [\-F <file>]
        [\-\-into\-name <branch>] [<commit>\&...]
\fIgit merge\fR (\-\-continue | \-\-abort | \-\-quit)
.fi
.sp
.SH "DESCRIPTION"
.sp
Incorporates changes from the named commits (since the time their histories diverged from the current branch) into the current branch\&. This command is used by \fBgit pull\fR to incorporate changes from another repository and can be used by hand to merge changes from one branch into another\&.
.sp
Assume the following history exists and the current branch is \fBmaster\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
          A\-\-\-B\-\-\-C topic
         /
    D\-\-\-E\-\-\-F\-\-\-G master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Then \fBgit merge topic\fR will replay the changes made on the \fBtopic\fR branch since it diverged from \fBmaster\fR (i\&.e\&., \fBE\fR) until its current commit (\fBC\fR) on top of \fBmaster\fR, and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes\&. Before the operation, \fBORIG_HEAD\fR is set to the tip of the current branch (\fBC\fR)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
          A\-\-\-B\-\-\-C topic
         /         \e
    D\-\-\-E\-\-\-F\-\-\-G\-\-\-H master
.fi
.if n \{\
.RE
.\}
.sp
.sp
A merge stops if there\(cqs a conflict that cannot be resolved automatically or if \fB\-\-no\-commit\fR was provided when initiating the merge\&. At that point you can run \fBgit merge \-\-abort\fR or \fBgit merge \-\-continue\fR\&.
.sp
\fBgit merge \-\-abort\fR will abort the merge process and try to reconstruct the pre\-merge state\&. However, if there were uncommitted changes when the merge started (and especially if those changes were further modified after the merge was started), \fBgit merge \-\-abort\fR will in some cases be unable to reconstruct the original (pre\-merge) changes\&. Therefore:
.sp
\fBWarning\fR: Running \fBgit merge\fR with non\-trivial uncommitted changes is discouraged: while possible, it may leave you in a state that is hard to back out of in the case of a conflict\&.
.SH "OPTIONS"
.PP
\-\-commit, \-\-no\-commit
.RS 4
Perform the merge and commit the result\&. This option can be used to override \-\-no\-commit\&.
.sp
With \-\-no\-commit perform the merge and stop just before creating a merge commit, to give the user a chance to inspect and further tweak the merge result before committing\&.
.sp
Note that fast\-forward updates do not create a merge commit and therefore there is no way to stop those merges with \-\-no\-commit\&. Thus, if you want to ensure your branch is not changed or updated by the merge command, use \-\-no\-ff with \-\-no\-commit\&.
.RE
.PP
\-\-edit, \-e, \-\-no\-edit
.RS 4
Invoke an editor before committing successful mechanical merge to further edit the auto\-generated merge message, so that the user can explain and justify the merge\&. The
\fB\-\-no\-edit\fR
option can be used to accept the auto\-generated message (this is generally discouraged)\&. The
\fB\-\-edit\fR
(or
\fB\-e\fR) option is still useful if you are giving a draft message with the
\fB\-m\fR
option from the command line and want to edit it in the editor\&.
.sp
Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message\&. They will see an editor opened when they run
\fBgit merge\fR\&. To make it easier to adjust such scripts to the updated behaviour, the environment variable
\fBGIT_MERGE_AUTOEDIT\fR
can be set to
\fBno\fR
at the beginning of them\&.
.RE
.PP
\-\-cleanup=<mode>
.RS 4
This option determines how the merge message will be cleaned up before committing\&. See
\fBgit-commit\fR(1)
for more details\&. In addition, if the
\fI<mode>\fR
is given a value of
\fBscissors\fR, scissors will be appended to
\fBMERGE_MSG\fR
before being passed on to the commit machinery in the case of a merge conflict\&.
.RE
.PP
\-\-ff, \-\-no\-ff, \-\-ff\-only
.RS 4
Specifies how a merge is handled when the merged\-in history is already a descendant of the current history\&.
\fB\-\-ff\fR
is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the
\fBrefs/tags/\fR
hierarchy, in which case
\fB\-\-no\-ff\fR
is assumed\&.
.sp
With
\fB\-\-ff\fR, when possible resolve the merge as a fast\-forward (only update the branch pointer to match the merged branch; do not create a merge commit)\&. When not possible (when the merged\-in history is not a descendant of the current history), create a merge commit\&.
.sp
With
\fB\-\-no\-ff\fR, create a merge commit in all cases, even when the merge could instead be resolved as a fast\-forward\&.
.sp
With
\fB\-\-ff\-only\fR, resolve the merge as a fast\-forward when possible\&. When not possible, refuse to merge and exit with a non\-zero status\&.
.RE
.PP
\-S[<keyid>], \-\-gpg\-sign[=<keyid>], \-\-no\-gpg\-sign
.RS 4
GPG\-sign the resulting merge commit\&. The
\fBkeyid\fR
argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space\&.
\fB\-\-no\-gpg\-sign\fR
is useful to countermand both
\fBcommit\&.gpgSign\fR
configuration variable, and earlier
\fB\-\-gpg\-sign\fR\&.
.RE
.PP
\-\-log[=<n>], \-\-no\-log
.RS 4
In addition to branch names, populate the log message with one\-line descriptions from at most <n> actual commits that are being merged\&. See also
\fBgit-fmt-merge-msg\fR(1)\&.
.sp
With \-\-no\-log do not list one\-line descriptions from the actual commits being merged\&.
.RE
.PP
\-\-signoff, \-\-no\-signoff
.RS 4
Add a
\fBSigned\-off\-by\fR
trailer by the committer at the end of the commit log message\&. The meaning of a signoff depends on the project to which you\(cqre committing\&. For example, it may certify that the committer has the rights to submit the work under the project\(cqs license or agrees to some contributor representation, such as a Developer Certificate of Origin\&. (See
\m[blue]\fBhttps://developercertificate\&.org\fR\m[]
for the one used by the Linux kernel and Git projects\&.) Consult the documentation or leadership of the project to which you\(cqre contributing to understand how the signoffs are used in that project\&.
.sp
The \-\-no\-signoff option can be used to countermand an earlier \-\-signoff option on the command line\&.
.RE
.PP
\-\-stat, \-n, \-\-no\-stat
.RS 4
Show a diffstat at the end of the merge\&. The diffstat is also controlled by the configuration option merge\&.stat\&.
.sp
With \-n or \-\-no\-stat do not show a diffstat at the end of the merge\&.
.RE
.PP
\-\-squash, \-\-no\-squash
.RS 4
Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the
\fBHEAD\fR, or record
\fB$GIT_DIR/MERGE_HEAD\fR
(to cause the next
\fBgit commit\fR
command to create a merge commit)\&. This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus)\&.
.sp
With \-\-no\-squash perform the merge and commit the result\&. This option can be used to override \-\-squash\&.
.sp
With \-\-squash, \-\-commit is not allowed, and will fail\&.
.RE
.PP
\-\-[no\-]verify
.RS 4
By default, the pre\-merge and commit\-msg hooks are run\&. When
\fB\-\-no\-verify\fR
is given, these are bypassed\&. See also
\fBgithooks\fR(5)\&.
.RE
.PP
\-s <strategy>, \-\-strategy=<strategy>
.RS 4
Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried\&. If there is no
\fB\-s\fR
option, a built\-in list of strategies is used instead (\fBort\fR
when merging a single head,
\fBoctopus\fR
otherwise)\&.
.RE
.PP
\-X <option>, \-\-strategy\-option=<option>
.RS 4
Pass merge strategy specific option through to the merge strategy\&.
.RE
.PP
\-\-verify\-signatures, \-\-no\-verify\-signatures
.RS 4
Verify that the tip commit of the side branch being merged is signed with a valid key, i\&.e\&. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key\&. If the tip commit of the side branch is not signed with a valid key, the merge is aborted\&.
.RE
.PP
\-\-summary, \-\-no\-summary
.RS 4
Synonyms to \-\-stat and \-\-no\-stat; these are deprecated and will be removed in the future\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Operate quietly\&. Implies \-\-no\-progress\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
Be verbose\&.
.RE
.PP
\-\-progress, \-\-no\-progress
.RS 4
Turn progress on/off explicitly\&. If neither is specified, progress is shown if standard error is connected to a terminal\&. Note that not all merge strategies may support progress reporting\&.
.RE
.PP
\-\-autostash, \-\-no\-autostash
.RS 4
Automatically create a temporary stash entry before the operation begins, record it in the ref
\fBMERGE_AUTOSTASH\fR
and apply it after the operation ends\&. This means that you can run the operation on a dirty worktree\&. However, use with care: the final stash application after a successful merge might result in non\-trivial conflicts\&.
.RE
.PP
\-\-allow\-unrelated\-histories
.RS 4
By default,
\fBgit merge\fR
command refuses to merge histories that do not share a common ancestor\&. This option can be used to override this safety when merging histories of two projects that started their lives independently\&. As that is a very rare occasion, no configuration variable to enable this by default exists and will not be added\&.
.RE
.PP
\-m <msg>
.RS 4
Set the commit message to be used for the merge commit (in case one is created)\&.
.sp
If
\fB\-\-log\fR
is specified, a shortlog of the commits being merged will be appended to the specified message\&.
.sp
The
\fBgit fmt\-merge\-msg\fR
command can be used to give a good default for automated
\fBgit merge\fR
invocations\&. The automated message can include the branch description\&.
.RE
.PP
\-\-into\-name <branch>
.RS 4
Prepare the default merge message as if merging to the branch
\fB<branch>\fR, instead of the name of the real branch to which the merge is made\&.
.RE
.PP
\-F <file>, \-\-file=<file>
.RS 4
Read the commit message to be used for the merge commit (in case one is created)\&.
.sp
If
\fB\-\-log\fR
is specified, a shortlog of the commits being merged will be appended to the specified message\&.
.RE
.PP
\-\-rerere\-autoupdate, \-\-no\-rerere\-autoupdate
.RS 4
After the rerere mechanism reuses a recorded resolution on the current conflict to update the files in the working tree, allow it to also update the index with the result of resolution\&.
\fB\-\-no\-rerere\-autoupdate\fR
is a good way to double\-check what
\fBrerere\fR
did and catch potential mismerges, before committing the result to the index with a separate
\fBgit add\fR\&.
.RE
.PP
\-\-overwrite\-ignore, \-\-no\-overwrite\-ignore
.RS 4
Silently overwrite ignored files from the merge result\&. This is the default behavior\&. Use
\fB\-\-no\-overwrite\-ignore\fR
to abort\&.
.RE
.PP
\-\-abort
.RS 4
Abort the current conflict resolution process, and try to reconstruct the pre\-merge state\&. If an autostash entry is present, apply it to the worktree\&.
.sp
If there were uncommitted worktree changes present when the merge started,
\fBgit merge \-\-abort\fR
will in some cases be unable to reconstruct these changes\&. It is therefore recommended to always commit or stash your changes before running
\fBgit merge\fR\&.
.sp
\fBgit merge \-\-abort\fR
is equivalent to
\fBgit reset \-\-merge\fR
when
\fBMERGE_HEAD\fR
is present unless
\fBMERGE_AUTOSTASH\fR
is also present in which case
\fBgit merge \-\-abort\fR
applies the stash entry to the worktree whereas
\fBgit reset \-\-merge\fR
will save the stashed changes in the stash list\&.
.RE
.PP
\-\-quit
.RS 4
Forget about the current merge in progress\&. Leave the index and the working tree as\-is\&. If
\fBMERGE_AUTOSTASH\fR
is present, the stash entry will be saved to the stash list\&.
.RE
.PP
\-\-continue
.RS 4
After a
\fBgit merge\fR
stops due to conflicts you can conclude the merge by running
\fBgit merge \-\-continue\fR
(see "HOW TO RESOLVE CONFLICTS" section below)\&.
.RE
.PP
<commit>\&...
.RS 4
Commits, usually other branch heads, to merge into our branch\&. Specifying more than one commit will create a merge with more than two parents (affectionately called an Octopus merge)\&.
.sp
If no commit is given from the command line, merge the remote\-tracking branches that the current branch is configured to use as its upstream\&. See also the configuration section of this manual page\&.
.sp
When
\fBFETCH_HEAD\fR
(and no other commit) is specified, the branches recorded in the
\fB\&.git/FETCH_HEAD\fR
file by the previous invocation of
\fBgit fetch\fR
for merging are merged to the current branch\&.
.RE
.SH "PRE\-MERGE CHECKS"
.sp
Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be clobbered if there are conflicts\&. See also \fBgit-stash\fR(1)\&. \fBgit pull\fR and \fBgit merge\fR will stop without doing anything when local uncommitted changes overlap with files that \fBgit pull\fR/\fBgit merge\fR may need to update\&.
.sp
To avoid recording unrelated changes in the merge commit, \fBgit pull\fR and \fBgit merge\fR will also abort if there are any changes registered in the index relative to the \fBHEAD\fR commit\&. (Special narrow exceptions to this rule may exist depending on which merge strategy is in use, but generally, the index must match HEAD\&.)
.sp
If all named commits are already ancestors of \fBHEAD\fR, \fBgit merge\fR will exit early with the message "Already up to date\&."
.SH "FAST\-FORWARD MERGE"
.sp
Often the current branch head is an ancestor of the named commit\&. This is the most common case especially when invoked from \fBgit pull\fR: you are tracking an upstream repository, you have committed no local changes, and now you want to update to a newer upstream revision\&. In this case, a new commit is not needed to store the combined history; instead, the \fBHEAD\fR (along with the index) is updated to point at the named commit, without creating an extra merge commit\&.
.sp
This behavior can be suppressed with the \fB\-\-no\-ff\fR option\&.
.SH "TRUE MERGE"
.sp
Except in a fast\-forward merge (see above), the branches to be merged must be tied together by a merge commit that has both of them as its parents\&.
.sp
A merged version reconciling the changes from all branches to be merged is committed, and your \fBHEAD\fR, index, and working tree are updated to it\&. It is possible to have modifications in the working tree as long as they do not overlap; the update will preserve them\&.
.sp
When it is not obvious how to reconcile the changes, the following happens:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
The
\fBHEAD\fR
pointer stays the same\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
The
\fBMERGE_HEAD\fR
ref is set to point to the other branch head\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Paths that merged cleanly are updated both in the index file and in your working tree\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common ancestor, stage 2 from
\fBHEAD\fR, and stage 3 from
\fBMERGE_HEAD\fR
(you can inspect the stages with
\fBgit ls\-files \-u\fR)\&. The working tree files contain the result of the merge operation; i\&.e\&. 3\-way merge results with familiar conflict markers
\fB<<<\fR
\fB===\fR
\fB>>>\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
A ref named
\fBAUTO_MERGE\fR
is written, pointing to a tree corresponding to the current content of the working tree (including conflict markers for textual conflicts)\&. Note that this ref is only written when the
\fIort\fR
merge strategy is used (the default)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
No other changes are made\&. In particular, the local modifications you had before you started merge will stay the same and the index entries for them stay as they were, i\&.e\&. matching
\fBHEAD\fR\&.
.RE
.sp
If you tried a merge which resulted in complex conflicts and want to start over, you can recover with \fBgit merge \-\-abort\fR\&.
.SH "MERGING TAG"
.sp
When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast\-forward merge is possible, and the commit message template is prepared with the tag message\&. Additionally, if the tag is signed, the signature check is reported as a comment in the message template\&. See also \fBgit-tag\fR(1)\&.
.sp
When you want to just integrate with the work leading to the commit that happens to be tagged, e\&.g\&. synchronizing with an upstream release point, you may not want to make an unnecessary merge commit\&.
.sp
In such a case, you can "unwrap" the tag yourself before feeding it to \fBgit merge\fR, or pass \fB\-\-ff\-only\fR when you do not have any work on your own\&. e\&.g\&.
.sp
.if n \{\
.RS 4
.\}
.nf
git fetch origin
git merge v1\&.2\&.3^0
git merge \-\-ff\-only v1\&.2\&.3
.fi
.if n \{\
.RE
.\}
.sp
.SH "HOW CONFLICTS ARE PRESENTED"
.sp
During a merge, the working tree files are updated to reflect the result of the merge\&. Among the changes made to the common ancestor\(cqs version, non\-overlapping ones (that is, you changed an area of the file while the other side left that area intact, or vice versa) are incorporated in the final result verbatim\&. When both sides made changes to the same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what both sides did to that area\&.
.sp
By default, Git uses the same style as the one used by the "merge" program from the RCS suite to present such a conflicted hunk, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed,
or cleanly resolved because both sides changed the same way\&.
<<<<<<< yours:sample\&.txt
Conflict resolution is hard;
let\*(Aqs go shopping\&.
=======
Git makes conflict resolution easy\&.
>>>>>>> theirs:sample\&.txt
And here is another line that is cleanly resolved or unmodified\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
The area where a pair of conflicting changes happened is marked with markers \fB<<<<<<<\fR, \fB=======\fR, and \fB>>>>>>>\fR\&. The part before the \fB=======\fR is typically your side, and the part afterwards is typically their side\&.
.sp
The default format does not show what the original said in the conflicting area\&. You cannot tell how many lines are deleted and replaced with Barbie\(cqs remark on your side\&. The only thing you can tell is that your side wants to say it is hard and you\(cqd prefer to go shopping, while the other side wants to claim it is easy\&.
.sp
An alternative style can be used by setting the \fBmerge\&.conflictStyle\fR configuration variable to either "diff3" or "zdiff3"\&. In "diff3" style, the above conflict may look like this:
.sp
.if n \{\
.RS 4
.\}
.nf
Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed,
<<<<<<< yours:sample\&.txt
or cleanly resolved because both sides changed the same way\&.
Conflict resolution is hard;
let\*(Aqs go shopping\&.
||||||| base:sample\&.txt
or cleanly resolved because both sides changed identically\&.
Conflict resolution is hard\&.
=======
or cleanly resolved because both sides changed the same way\&.
Git makes conflict resolution easy\&.
>>>>>>> theirs:sample\&.txt
And here is another line that is cleanly resolved or unmodified\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
while in "zdiff3" style, it may look like this:
.sp
.if n \{\
.RS 4
.\}
.nf
Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed,
or cleanly resolved because both sides changed the same way\&.
<<<<<<< yours:sample\&.txt
Conflict resolution is hard;
let\*(Aqs go shopping\&.
||||||| base:sample\&.txt
or cleanly resolved because both sides changed identically\&.
Conflict resolution is hard\&.
=======
Git makes conflict resolution easy\&.
>>>>>>> theirs:sample\&.txt
And here is another line that is cleanly resolved or unmodified\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
In addition to the \fB<<<<<<<\fR, \fB=======\fR, and \fB>>>>>>>\fR markers, it uses another \fB|||||||\fR marker that is followed by the original text\&. You can tell that the original just stated a fact, and your side simply gave in to that statement and gave up, while the other side tried to have a more positive attitude\&. You can sometimes come up with a better resolution by viewing the original\&.
.SH "HOW TO RESOLVE CONFLICTS"
.sp
After seeing a conflict, you can do two things:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Decide not to merge\&. The only clean\-ups you need are to reset the index file to the
\fBHEAD\fR
commit to reverse 2\&. and to clean up working tree changes made by 2\&. and 3\&.;
\fBgit merge \-\-abort\fR
can be used for this\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Resolve the conflicts\&. Git will mark the conflicts in the working tree\&. Edit the files into shape and
\fBgit add\fR
them to the index\&. Use
\fBgit commit\fR
or
\fBgit merge \-\-continue\fR
to seal the deal\&. The latter command checks whether there is a (interrupted) merge in progress before calling
\fBgit commit\fR\&.
.RE
.sp
You can work through the conflict with a number of tools:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Use a mergetool\&.
\fBgit mergetool\fR
to launch a graphical mergetool which will work through the merge with you\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Look at the diffs\&.
\fBgit diff\fR
will show a three\-way diff, highlighting changes from both the
\fBHEAD\fR
and
\fBMERGE_HEAD\fR
versions\&.
\fBgit diff AUTO_MERGE\fR
will show what changes you\(cqve made so far to resolve textual conflicts\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Look at the diffs from each branch\&.
\fBgit log \-\-merge \-p <path>\fR
will show diffs first for the
\fBHEAD\fR
version and then the
\fBMERGE_HEAD\fR
version\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Look at the originals\&.
\fBgit show :1:filename\fR
shows the common ancestor,
\fBgit show :2:filename\fR
shows the
\fBHEAD\fR
version, and
\fBgit show :3:filename\fR
shows the
\fBMERGE_HEAD\fR
version\&.
.RE
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Merge branches
\fBfixes\fR
and
\fBenhancements\fR
on top of the current branch, making an octopus merge:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git merge fixes enhancements
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Merge branch
\fBobsolete\fR
into the current branch, using
\fBours\fR
merge strategy:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git merge \-s ours obsolete
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Merge branch
\fBmaint\fR
into the current branch, but do not make a new commit automatically:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git merge \-\-no\-commit maint
.fi
.if n \{\
.RE
.\}
.sp
This can be used when you want to include further changes to the merge, or want to write your own merge commit message\&.
.sp
You should refrain from abusing this option to sneak substantial changes into a merge commit\&. Small fixups like bumping release/version name would be acceptable\&.
.RE
.SH "MERGE STRATEGIES"
.sp
The merge mechanism (\fBgit merge\fR and \fBgit pull\fR commands) allows the backend \fImerge strategies\fR to be chosen with \fB\-s\fR option\&. Some strategies can also take their own options, which can be passed by giving \fB\-X<option>\fR arguments to \fBgit merge\fR and/or \fBgit pull\fR\&.
.PP
ort
.RS 4
This is the default merge strategy when pulling or merging one branch\&. This strategy can only resolve two heads using a 3\-way merge algorithm\&. When there is more than one common ancestor that can be used for 3\-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3\-way merge\&. This has been reported to result in fewer merge conflicts without causing mismerges by tests done on actual merge commits taken from Linux 2\&.6 kernel development history\&. Additionally this strategy can detect and handle merges involving renames\&. It does not make use of detected copies\&. The name for this algorithm is an acronym ("Ostensibly Recursive\(cqs Twin") and came from the fact that it was written as a replacement for the previous default algorithm,
\fBrecursive\fR\&.
.sp
The
\fIort\fR
strategy can take the following options:
.PP
ours
.RS 4
This option forces conflicting hunks to be auto\-resolved cleanly by favoring
\fIour\fR
version\&. Changes from the other tree that do not conflict with our side are reflected in the merge result\&. For a binary file, the entire contents are taken from our side\&.
.sp
This should not be confused with the
\fIours\fR
merge strategy, which does not even look at what the other tree contains at all\&. It discards everything the other tree did, declaring
\fIour\fR
history contains all that happened in it\&.
.RE
.PP
theirs
.RS 4
This is the opposite of
\fIours\fR; note that, unlike
\fIours\fR, there is no
\fItheirs\fR
merge strategy to confuse this merge option with\&.
.RE
.PP
ignore\-space\-change, ignore\-all\-space, ignore\-space\-at\-eol, ignore\-cr\-at\-eol
.RS 4
Treats lines with the indicated type of whitespace change as unchanged for the sake of a three\-way merge\&. Whitespace changes mixed with other changes to a line are not ignored\&. See also
\fBgit-diff\fR(1)
\fB\-b\fR,
\fB\-w\fR,
\fB\-\-ignore\-space\-at\-eol\fR, and
\fB\-\-ignore\-cr\-at\-eol\fR\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fItheir\fR
version only introduces whitespace changes to a line,
\fIour\fR
version is used;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
\fIour\fR
version introduces whitespace changes but
\fItheir\fR
version includes a substantial change,
\fItheir\fR
version is used;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise, the merge proceeds in the usual way\&.
.RE
.RE
.PP
renormalize
.RS 4
This runs a virtual check\-out and check\-in of all three stages of a file when resolving a three\-way merge\&. This option is meant to be used when merging branches with different clean filters or end\-of\-line normalization rules\&. See "Merging branches with differing checkin/checkout attributes" in
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
no\-renormalize
.RS 4
Disables the
\fBrenormalize\fR
option\&. This overrides the
\fBmerge\&.renormalize\fR
configuration variable\&.
.RE
.PP
find\-renames[=<n>]
.RS 4
Turn on rename detection, optionally setting the similarity threshold\&. This is the default\&. This overrides the
\fImerge\&.renames\fR
configuration variable\&. See also
\fBgit-diff\fR(1)
\fB\-\-find\-renames\fR\&.
.RE
.PP
rename\-threshold=<n>
.RS 4
Deprecated synonym for
\fBfind\-renames=<n>\fR\&.
.RE
.PP
subtree[=<path>]
.RS 4
This option is a more advanced form of
\fIsubtree\fR
strategy, where the strategy makes a guess on how two trees must be shifted to match with each other when merging\&. Instead, the specified path is prefixed (or stripped from the beginning) to make the shape of two trees to match\&.
.RE
.RE
.PP
recursive
.RS 4
This can only resolve two heads using a 3\-way merge algorithm\&. When there is more than one common ancestor that can be used for 3\-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3\-way merge\&. This has been reported to result in fewer merge conflicts without causing mismerges by tests done on actual merge commits taken from Linux 2\&.6 kernel development history\&. Additionally this can detect and handle merges involving renames\&. It does not make use of detected copies\&. This was the default strategy for resolving two heads from Git v0\&.99\&.9k until v2\&.33\&.0\&.
.sp
The
\fIrecursive\fR
strategy takes the same options as
\fIort\fR\&. However, there are three additional options that
\fIort\fR
ignores (not documented above) that are potentially useful with the
\fIrecursive\fR
strategy:
.PP
patience
.RS 4
Deprecated synonym for
\fBdiff\-algorithm=patience\fR\&.
.RE
.PP
diff\-algorithm=[patience|minimal|histogram|myers]
.RS 4
Use a different diff algorithm while merging, which can help avoid mismerges that occur due to unimportant matching lines (such as braces from distinct functions)\&. See also
\fBgit-diff\fR(1)
\fB\-\-diff\-algorithm\fR\&. Note that
\fBort\fR
specifically uses
\fBdiff\-algorithm=histogram\fR, while
\fBrecursive\fR
defaults to the
\fBdiff\&.algorithm\fR
config setting\&.
.RE
.PP
no\-renames
.RS 4
Turn off rename detection\&. This overrides the
\fBmerge\&.renames\fR
configuration variable\&. See also
\fBgit-diff\fR(1)
\fB\-\-no\-renames\fR\&.
.RE
.RE
.PP
resolve
.RS 4
This can only resolve two heads (i\&.e\&. the current branch and another branch you pulled from) using a 3\-way merge algorithm\&. It tries to carefully detect criss\-cross merge ambiguities\&. It does not handle renames\&.
.RE
.PP
octopus
.RS 4
This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution\&. It is primarily meant to be used for bundling topic branch heads together\&. This is the default merge strategy when pulling or merging more than one branch\&.
.RE
.PP
ours
.RS 4
This resolves any number of heads, but the resulting tree of the merge is always that of the current branch head, effectively ignoring all changes from all other branches\&. It is meant to be used to supersede old development history of side branches\&. Note that this is different from the \-Xours option to the
\fIrecursive\fR
merge strategy\&.
.RE
.PP
subtree
.RS 4
This is a modified
\fBort\fR
strategy\&. When merging trees A and B, if B corresponds to a subtree of A, B is first adjusted to match the tree structure of A, instead of reading the trees at the same level\&. This adjustment is also done to the common ancestor tree\&.
.RE
.sp
With the strategies that use 3\-way merge (including the default, \fIort\fR), if a change is made on both branches, but later reverted on one of the branches, that change will be present in the merged result; some people find this behavior confusing\&. It occurs because only the heads and the merge base are considered when performing a merge, not the individual commits\&. The merge algorithm therefore considers the reverted change as no change at all, and substitutes the changed version instead\&.
.SH "CONFIGURATION"
.PP
branch\&.<name>\&.mergeOptions
.RS 4
Sets default options for merging into branch <name>\&. The syntax and supported options are the same as those of
\fBgit merge\fR, but option values containing whitespace characters are currently not supported\&.
.RE
.sp
Everything above this line in this section isn\(cqt included from the \fBgit-config\fR(1) documentation\&. The content that follows is the same as what\(cqs found there:
.PP
merge\&.conflictStyle
.RS 4
Specify the style in which conflicted hunks are written out to working tree files upon merge\&. The default is "merge", which shows a
\fB<<<<<<<\fR
conflict marker, changes made by one side, a
\fB=======\fR
marker, changes made by the other side, and then a
\fB>>>>>>>\fR
marker\&. An alternate style, "diff3", adds a
\fB|||||||\fR
marker and the original text before the
\fB=======\fR
marker\&. The "merge" style tends to produce smaller conflict regions than diff3, both because of the exclusion of the original text, and because when a subset of lines match on the two sides, they are just pulled out of the conflict region\&. Another alternate style, "zdiff3", is similar to diff3 but removes matching lines on the two sides from the conflict region when those matching lines appear near either the beginning or end of a conflict region\&.
.RE
.PP
merge\&.defaultToUpstream
.RS 4
If merge is called without any commit argument, merge the upstream branches configured for the current branch by using their last observed values stored in their remote\-tracking branches\&. The values of the
\fBbranch\&.<current branch>\&.merge\fR
that name the branches at the remote named by
\fBbranch\&.<current branch>\&.remote\fR
are consulted, and then they are mapped via
\fBremote\&.<remote>\&.fetch\fR
to their corresponding remote\-tracking branches, and the tips of these tracking branches are merged\&. Defaults to true\&.
.RE
.PP
merge\&.ff
.RS 4
By default, Git does not create an extra merge commit when merging a commit that is a descendant of the current commit\&. Instead, the tip of the current branch is fast\-forwarded\&. When set to
\fBfalse\fR, this variable tells Git to create an extra merge commit in such a case (equivalent to giving the
\fB\-\-no\-ff\fR
option from the command line)\&. When set to
\fBonly\fR, only such fast\-forward merges are allowed (equivalent to giving the
\fB\-\-ff\-only\fR
option from the command line)\&.
.RE
.PP
merge\&.verifySignatures
.RS 4
If true, this is equivalent to the \-\-verify\-signatures command line option\&. See
\fBgit-merge\fR(1)
for details\&.
.RE
.PP
merge\&.branchdesc
.RS 4
In addition to branch names, populate the log message with the branch description text associated with them\&. Defaults to false\&.
.RE
.PP
merge\&.log
.RS 4
In addition to branch names, populate the log message with at most the specified number of one\-line descriptions from the actual commits that are being merged\&. Defaults to false, and true is a synonym for 20\&.
.RE
.PP
merge\&.suppressDest
.RS 4
By adding a glob that matches the names of integration branches to this multi\-valued configuration variable, the default merge message computed for merges into these integration branches will omit "into <branch name>" from its title\&.
.sp
An element with an empty value can be used to clear the list of globs accumulated from previous configuration entries\&. When there is no
\fBmerge\&.suppressDest\fR
variable defined, the default value of
\fBmaster\fR
is used for backward compatibility\&.
.RE
.PP
merge\&.renameLimit
.RS 4
The number of files to consider in the exhaustive portion of rename detection during a merge\&. If not specified, defaults to the value of diff\&.renameLimit\&. If neither merge\&.renameLimit nor diff\&.renameLimit are specified, currently defaults to 7000\&. This setting has no effect if rename detection is turned off\&.
.RE
.PP
merge\&.renames
.RS 4
Whether Git detects renames\&. If set to "false", rename detection is disabled\&. If set to "true", basic rename detection is enabled\&. Defaults to the value of diff\&.renames\&.
.RE
.PP
merge\&.directoryRenames
.RS 4
Whether Git detects directory renames, affecting what happens at merge time to new files added to a directory on one side of history when that directory was renamed on the other side of history\&. If merge\&.directoryRenames is set to "false", directory rename detection is disabled, meaning that such new files will be left behind in the old directory\&. If set to "true", directory rename detection is enabled, meaning that such new files will be moved into the new directory\&. If set to "conflict", a conflict will be reported for such paths\&. If merge\&.renames is false, merge\&.directoryRenames is ignored and treated as false\&. Defaults to "conflict"\&.
.RE
.PP
merge\&.renormalize
.RS 4
Tell Git that canonical representation of files in the repository has changed over time (e\&.g\&. earlier commits record text files with CRLF line endings, but recent ones use LF line endings)\&. In such a repository, Git can convert the data recorded in commits to a canonical form before performing a merge to reduce unnecessary conflicts\&. For more information, see section "Merging branches with differing checkin/checkout attributes" in
\fBgitattributes\fR(5)\&.
.RE
.PP
merge\&.stat
.RS 4
Whether to print the diffstat between ORIG_HEAD and the merge result at the end of the merge\&. True by default\&.
.RE
.PP
merge\&.autoStash
.RS 4
When set to true, automatically create a temporary stash entry before the operation begins, and apply it after the operation ends\&. This means that you can run merge on a dirty worktree\&. However, use with care: the final stash application after a successful merge might result in non\-trivial conflicts\&. This option can be overridden by the
\fB\-\-no\-autostash\fR
and
\fB\-\-autostash\fR
options of
\fBgit-merge\fR(1)\&. Defaults to false\&.
.RE
.PP
merge\&.tool
.RS 4
Controls which merge tool is used by
\fBgit-mergetool\fR(1)\&. The list below shows the valid built\-in values\&. Any other value is treated as a custom merge tool and requires that a corresponding mergetool\&.<tool>\&.cmd variable is defined\&.
.RE
.PP
merge\&.guitool
.RS 4
Controls which merge tool is used by
\fBgit-mergetool\fR(1)
when the \-g/\-\-gui flag is specified\&. The list below shows the valid built\-in values\&. Any other value is treated as a custom merge tool and requires that a corresponding mergetool\&.<guitool>\&.cmd variable is defined\&.
.PP
\fBaraxis\fR
.RS 4
Use Araxis Merge (requires a graphical session)
.RE
.PP
\fBbc\fR
.RS 4
Use Beyond Compare (requires a graphical session)
.RE
.PP
\fBbc3\fR
.RS 4
Use Beyond Compare (requires a graphical session)
.RE
.PP
\fBbc4\fR
.RS 4
Use Beyond Compare (requires a graphical session)
.RE
.PP
\fBcodecompare\fR
.RS 4
Use Code Compare (requires a graphical session)
.RE
.PP
\fBdeltawalker\fR
.RS 4
Use DeltaWalker (requires a graphical session)
.RE
.PP
\fBdiffmerge\fR
.RS 4
Use DiffMerge (requires a graphical session)
.RE
.PP
\fBdiffuse\fR
.RS 4
Use Diffuse (requires a graphical session)
.RE
.PP
\fBecmerge\fR
.RS 4
Use ECMerge (requires a graphical session)
.RE
.PP
\fBemerge\fR
.RS 4
Use Emacs\*(Aq Emerge
.RE
.PP
\fBexamdiff\fR
.RS 4
Use ExamDiff Pro (requires a graphical session)
.RE
.PP
\fBguiffy\fR
.RS 4
Use Guiffy\(cqs Diff Tool (requires a graphical session)
.RE
.PP
\fBgvimdiff\fR
.RS 4
Use gVim (requires a graphical session) with a custom layout (see
\fBgit help mergetool\fR\*(Aqs
\fBBACKEND SPECIFIC HINTS\fR
section)
.RE
.PP
\fBgvimdiff1\fR
.RS 4
Use gVim (requires a graphical session) with a 2 panes layout (LOCAL and REMOTE)
.RE
.PP
\fBgvimdiff2\fR
.RS 4
Use gVim (requires a graphical session) with a 3 panes layout (LOCAL, MERGED and REMOTE)
.RE
.PP
\fBgvimdiff3\fR
.RS 4
Use gVim (requires a graphical session) where only the MERGED file is shown
.RE
.PP
\fBkdiff3\fR
.RS 4
Use KDiff3 (requires a graphical session)
.RE
.PP
\fBmeld\fR
.RS 4
Use Meld (requires a graphical session) with optional
\fBauto merge\fR
(see
\fBgit help mergetool\fR\*(Aqs
\fBCONFIGURATION\fR
section)
.RE
.PP
\fBnvimdiff\fR
.RS 4
Use Neovim with a custom layout (see
\fBgit help mergetool\fR\*(Aqs
\fBBACKEND SPECIFIC HINTS\fR
section)
.RE
.PP
\fBnvimdiff1\fR
.RS 4
Use Neovim with a 2 panes layout (LOCAL and REMOTE)
.RE
.PP
\fBnvimdiff2\fR
.RS 4
Use Neovim with a 3 panes layout (LOCAL, MERGED and REMOTE)
.RE
.PP
\fBnvimdiff3\fR
.RS 4
Use Neovim where only the MERGED file is shown
.RE
.PP
\fBopendiff\fR
.RS 4
Use FileMerge (requires a graphical session)
.RE
.PP
\fBp4merge\fR
.RS 4
Use HelixCore P4Merge (requires a graphical session)
.RE
.PP
\fBsmerge\fR
.RS 4
Use Sublime Merge (requires a graphical session)
.RE
.PP
\fBtkdiff\fR
.RS 4
Use TkDiff (requires a graphical session)
.RE
.PP
\fBtortoisemerge\fR
.RS 4
Use TortoiseMerge (requires a graphical session)
.RE
.PP
\fBvimdiff\fR
.RS 4
Use Vim with a custom layout (see
\fBgit help mergetool\fR\*(Aqs
\fBBACKEND SPECIFIC HINTS\fR
section)
.RE
.PP
\fBvimdiff1\fR
.RS 4
Use Vim with a 2 panes layout (LOCAL and REMOTE)
.RE
.PP
\fBvimdiff2\fR
.RS 4
Use Vim with a 3 panes layout (LOCAL, MERGED and REMOTE)
.RE
.PP
\fBvimdiff3\fR
.RS 4
Use Vim where only the MERGED file is shown
.RE
.PP
\fBwinmerge\fR
.RS 4
Use WinMerge (requires a graphical session)
.RE
.PP
\fBxxdiff\fR
.RS 4
Use xxdiff (requires a graphical session)
.RE
.RE
.PP
merge\&.verbosity
.RS 4
Controls the amount of output shown by the recursive merge strategy\&. Level 0 outputs nothing except a final error message if conflicts were detected\&. Level 1 outputs only conflicts, 2 outputs conflicts and file changes\&. Level 5 and above outputs debugging information\&. The default is level 2\&. Can be overridden by the
\fBGIT_MERGE_VERBOSITY\fR
environment variable\&.
.RE
.PP
merge\&.<driver>\&.name
.RS 4
Defines a human\-readable name for a custom low\-level merge driver\&. See
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
merge\&.<driver>\&.driver
.RS 4
Defines the command that implements a custom low\-level merge driver\&. See
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
merge\&.<driver>\&.recursive
.RS 4
Names a low\-level merge driver to be used when performing an internal merge between common ancestors\&. See
\fBgitattributes\fR(5)
for details\&.
.RE
.SH "SEE ALSO"
.sp
\fBgit-fmt-merge-msg\fR(1), \fBgit-pull\fR(1), \fBgitattributes\fR(5), \fBgit-reset\fR(1), \fBgit-diff\fR(1), \fBgit-ls-files\fR(1), \fBgit-add\fR(1), \fBgit-rm\fR(1), \fBgit-mergetool\fR(1)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
