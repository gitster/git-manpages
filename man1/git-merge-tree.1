'\" t
.\"     Title: git-merge-tree
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 2024-07-29
.\"    Manual: Git Manual
.\"    Source: Git 2.46.0
.\"  Language: English
.\"
.TH "GIT\-MERGE\-TREE" "1" "2024\-07\-29" "Git 2\&.46\&.0" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-merge-tree \- Perform merge without touching index or working tree
.SH "SYNOPSIS"
.sp
.nf
\fIgit merge\-tree\fR [\-\-write\-tree] [<options>] <branch1> <branch2>
\fIgit merge\-tree\fR [\-\-trivial\-merge] <base\-tree> <branch1> <branch2> (deprecated)
.fi
.sp
.SH "DESCRIPTION"
.sp
This command has a modern \fB\-\-write\-tree\fR mode and a deprecated \fB\-\-trivial\-merge\fR mode\&. With the exception of the DEPRECATED DESCRIPTION section at the end, the rest of this documentation describes the modern \fB\-\-write\-tree\fR mode\&.
.sp
Performs a merge, but does not make any new commits and does not read from or write to either the working tree or index\&.
.sp
The performed merge will use the same features as the "real" \fBgit-merge\fR(1), including:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
three way content merges of individual files
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rename detection
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
proper directory/file conflict handling
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
recursive ancestor consolidation (i\&.e\&. when there is more than one merge base, creating a virtual merge base by merging the merge bases)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
etc\&.
.RE
.sp
After the merge completes, a new toplevel tree object is created\&. See \fBOUTPUT\fR below for details\&.
.SH "OPTIONS"
.PP
\-z
.RS 4
Do not quote filenames in the <Conflicted file info> section, and end each filename with a NUL character rather than newline\&. Also begin the messages section with a NUL character instead of a newline\&. See
the section called \(lqOUTPUT\(rq
below for more information\&.
.RE
.PP
\-\-name\-only
.RS 4
In the Conflicted file info section, instead of writing a list of (mode, oid, stage, path) tuples to output for conflicted files, just provide a list of filenames with conflicts (and do not list filenames multiple times if they have multiple conflicting stages)\&.
.RE
.PP
\-\-[no\-]messages
.RS 4
Write any informational messages such as "Auto\-merging <path>" or CONFLICT notices to the end of stdout\&. If unspecified, the default is to include these messages if there are merge conflicts, and to omit them otherwise\&.
.RE
.PP
\-\-allow\-unrelated\-histories
.RS 4
merge\-tree will by default error out if the two branches specified share no common history\&. This flag can be given to override that check and make the merge proceed anyway\&.
.RE
.PP
\-\-merge\-base=<tree\-ish>
.RS 4
Instead of finding the merge\-bases for <branch1> and <branch2>, specify a merge\-base for the merge, and specifying multiple bases is currently not supported\&. This option is incompatible with
\fB\-\-stdin\fR\&.
.sp
As the merge\-base is provided directly, <branch1> and <branch2> do not need to specify commits; trees are enough\&.
.RE
.PP
\-X<option>, \-\-strategy\-option=<option>
.RS 4
Pass the merge strategy\-specific option through to the merge strategy\&. See
\fBgit-merge\fR(1)
for details\&.
.RE
.SH "OUTPUT"
.sp
For a successful merge, the output from git\-merge\-tree is simply one line:
.sp
.if n \{\
.RS 4
.\}
.nf
<OID of toplevel tree>
.fi
.if n \{\
.RE
.\}
.sp
Whereas for a conflicted merge, the output is by default of the form:
.sp
.if n \{\
.RS 4
.\}
.nf
<OID of toplevel tree>
<Conflicted file info>
<Informational messages>
.fi
.if n \{\
.RE
.\}
.sp
These are discussed individually below\&.
.sp
However, there is an exception\&. If \fB\-\-stdin\fR is passed, then there is an extra section at the beginning, a NUL character at the end, and then all the sections repeat for each line of input\&. Thus, if the first merge is conflicted and the second is clean, the output would be of the form:
.sp
.if n \{\
.RS 4
.\}
.nf
<Merge status>
<OID of toplevel tree>
<Conflicted file info>
<Informational messages>
NUL
<Merge status>
<OID of toplevel tree>
NUL
.fi
.if n \{\
.RE
.\}
.SS "Merge status"
.sp
This is an integer status followed by a NUL character\&. The integer status is:
.sp
.if n \{\
.RS 4
.\}
.nf
0: merge had conflicts
1: merge was clean
<0: something prevented the merge from running (e\&.g\&. access to repository
    objects denied by filesystem)
.fi
.if n \{\
.RE
.\}
.SS "OID of toplevel tree"
.sp
This is a tree object that represents what would be checked out in the working tree at the end of \fBgit merge\fR\&. If there were conflicts, then files within this tree may have embedded conflict markers\&. This section is always followed by a newline (or NUL if \fB\-z\fR is passed)\&.
.SS "Conflicted file info"
.sp
This is a sequence of lines with the format
.sp
.if n \{\
.RS 4
.\}
.nf
<mode> <object> <stage> <filename>
.fi
.if n \{\
.RE
.\}
.sp
The filename will be quoted as explained for the configuration variable \fBcore\&.quotePath\fR (see \fBgit-config\fR(1))\&. However, if the \fB\-\-name\-only\fR option is passed, the mode, object, and stage will be omitted\&. If \fB\-z\fR is passed, the "lines" are terminated by a NUL character instead of a newline character\&.
.SS "Informational messages"
.sp
This section provides informational messages, typically about conflicts\&. The format of the section varies significantly depending on whether \fB\-z\fR is passed\&.
.sp
If \fB\-z\fR is passed:
.sp
The output format is zero or more conflict informational records, each of the form:
.sp
.if n \{\
.RS 4
.\}
.nf
<list\-of\-paths><conflict\-type>NUL<conflict\-message>NUL
.fi
.if n \{\
.RE
.\}
.sp
where <list\-of\-paths> is of the form
.sp
.if n \{\
.RS 4
.\}
.nf
<number\-of\-paths>NUL<path1>NUL<path2>NUL\&.\&.\&.<pathN>NUL
.fi
.if n \{\
.RE
.\}
.sp
and includes paths (or branch names) affected by the conflict or informational message in <conflict\-message>\&. Also, <conflict\-type> is a stable string explaining the type of conflict, such as
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"Auto\-merging"
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"CONFLICT (rename/delete)"
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"CONFLICT (submodule lacks merge base)"
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"CONFLICT (binary)"
.RE
.sp
and <conflict\-message> is a more detailed message about the conflict which often (but not always) embeds the <stable\-short\-type\-description> within it\&. These strings may change in future Git versions\&. Some examples:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"Auto\-merging <file>"
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"CONFLICT (rename/delete): <oldfile> renamed\&...but deleted in\&..."
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"Failed to merge submodule <submodule> (no merge base)"
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"Warning: cannot merge binary files: <filename>"
.RE
.sp
If \fB\-z\fR is NOT passed:
.sp
This section starts with a blank line to separate it from the previous sections, and then only contains the <conflict\-message> information from the previous section (separated by newlines)\&. These are non\-stable strings that should not be parsed by scripts, and are just meant for human consumption\&. Also, note that while <conflict\-message> strings usually do not contain embedded newlines, they sometimes do\&. (However, the free\-form messages will never have an embedded NUL character)\&. So, the entire block of information is meant for human readers as an agglomeration of all conflict messages\&.
.SH "EXIT STATUS"
.sp
For a successful, non\-conflicted merge, the exit status is 0\&. When the merge has conflicts, the exit status is 1\&. If the merge is not able to complete (or start) due to some kind of error, the exit status is something other than 0 or 1 (and the output is unspecified)\&. When \-\-stdin is passed, the return status is 0 for both successful and conflicted merges, and something other than 0 or 1 if it cannot complete all the requested merges\&.
.SH "USAGE NOTES"
.sp
This command is intended as low\-level plumbing, similar to \fBgit-hash-object\fR(1), \fBgit-mktree\fR(1), \fBgit-commit-tree\fR(1), \fBgit-write-tree\fR(1), \fBgit-update-ref\fR(1), and \fBgit-mktag\fR(1)\&. Thus, it can be used as a part of a series of steps such as:
.sp
.if n \{\
.RS 4
.\}
.nf
NEWTREE=$(git merge\-tree \-\-write\-tree $BRANCH1 $BRANCH2)
test $? \-eq 0 || die "There were conflicts\&.\&.\&."
NEWCOMMIT=$(git commit\-tree $NEWTREE \-p $BRANCH1 \-p $BRANCH2)
git update\-ref $BRANCH1 $NEWCOMMIT
.fi
.if n \{\
.RE
.\}
.sp
Note that when the exit status is non\-zero, \fBNEWTREE\fR in this sequence will contain a lot more output than just a tree\&.
.sp
For conflicts, the output includes the same information that you\(cqd get with \fBgit-merge\fR(1):
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
what would be written to the working tree (the
OID of toplevel tree)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the higher order stages that would be written to the index (the
Conflicted file info)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
any messages that would have been printed to stdout (the
Informational messages)
.RE
.SH "INPUT FORMAT"
.sp
\fIgit merge\-tree \-\-stdin\fR input format is fully text based\&. Each line has this format:
.sp
.if n \{\
.RS 4
.\}
.nf
[<base\-commit> \-\- ]<branch1> <branch2>
.fi
.if n \{\
.RE
.\}
.sp
If one line is separated by \fB\-\-\fR, the string before the separator is used for specifying a merge\-base for the merge and the string after the separator describes the branches to be merged\&.
.SH "MISTAKES TO AVOID"
.sp
Do NOT look through the resulting toplevel tree to try to find which files conflict; parse the Conflicted file info section instead\&. Not only would parsing an entire tree be horrendously slow in large repositories, there are numerous types of conflicts not representable by conflict markers (modify/delete, mode conflict, binary file changed on both sides, file/directory conflicts, various rename conflict permutations, etc\&.)
.sp
Do NOT interpret an empty Conflicted file info list as a clean merge; check the exit status\&. A merge can have conflicts without having individual files conflict (there are a few types of directory rename conflicts that fall into this category, and others might also be added in the future)\&.
.sp
Do NOT attempt to guess or make the user guess the conflict types from the Conflicted file info list\&. The information there is insufficient to do so\&. For example: Rename/rename(1to2) conflicts (both sides renamed the same file differently) will result in three different files having higher order stages (but each only has one higher order stage), with no way (short of the Informational messages section) to determine which three files are related\&. File/directory conflicts also result in a file with exactly one higher order stage\&. Possibly\-involved\-in\-directory\-rename conflicts (when "merge\&.directoryRenames" is unset or set to "conflicts") also result in a file with exactly one higher order stage\&. In all cases, the Informational messages section has the necessary info, though it is not designed to be machine parseable\&.
.sp
Do NOT assume that each path from Conflicted file info, and the logical conflicts in the Informational messages have a one\-to\-one mapping, nor that there is a one\-to\-many mapping, nor a many\-to\-one mapping\&. Many\-to\-many mappings exist, meaning that each path can have many logical conflict types in a single merge, and each logical conflict type can affect many paths\&.
.sp
Do NOT assume all filenames listed in the Informational messages section had conflicts\&. Messages can be included for files that have no conflicts, such as "Auto\-merging <file>"\&.
.sp
AVOID taking the OIDS from the Conflicted file info and re\-merging them to present the conflicts to the user\&. This will lose information\&. Instead, look up the version of the file found within the OID of toplevel tree and show that instead\&. In particular, the latter will have conflict markers annotated with the original branch/commit being merged and, if renames were involved, the original filename\&. While you could include the original branch/commit in the conflict marker annotations when re\-merging, the original filename is not available from the Conflicted file info and thus you would be losing information that might help the user resolve the conflict\&.
.SH "DEPRECATED DESCRIPTION"
.sp
Per the DESCRIPTION and unlike the rest of this documentation, this section describes the deprecated \fB\-\-trivial\-merge\fR mode\&.
.sp
Other than the optional \fB\-\-trivial\-merge\fR, this mode accepts no options\&.
.sp
This mode reads three tree\-ish, and outputs trivial merge results and conflicting stages to the standard output in a semi\-diff format\&. Since this was designed for higher level scripts to consume and merge the results back into the index, it omits entries that match <branch1>\&. The result of this second form is similar to what three\-way \fIgit read\-tree \-m\fR does, but instead of storing the results in the index, the command outputs the entries to the standard output\&.
.sp
This form not only has limited applicability (a trivial merge cannot handle content merges of individual files, rename detection, proper directory/file conflict handling, etc\&.), the output format is also difficult to work with, and it will generally be less performant than the first form even on successful merges (especially if working in large repositories)\&.
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
