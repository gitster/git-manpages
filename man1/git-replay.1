'\" t
.\"     Title: git-replay
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 2024-07-29
.\"    Manual: Git Manual
.\"    Source: Git 2.46.0
.\"  Language: English
.\"
.TH "GIT\-REPLAY" "1" "2024\-07\-29" "Git 2\&.46\&.0" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-replay \- EXPERIMENTAL: Replay commits on a new base, works with bare repos too
.SH "SYNOPSIS"
.sp
.nf
(EXPERIMENTAL!) \fIgit replay\fR ([\-\-contained] \-\-onto <newbase> | \-\-advance <branch>) <revision\-range>\&...
.fi
.sp
.SH "DESCRIPTION"
.sp
Takes ranges of commits and replays them onto a new location\&. Leaves the working tree and the index untouched, and updates no references\&. The output of this command is meant to be used as input to \fBgit update\-ref \-\-stdin\fR, which would update the relevant branches (see the OUTPUT section below)\&.
.sp
THIS COMMAND IS EXPERIMENTAL\&. THE BEHAVIOR MAY CHANGE\&.
.SH "OPTIONS"
.PP
\-\-onto <newbase>
.RS 4
Starting point at which to create the new commits\&. May be any valid commit, and not just an existing branch name\&.
.sp
When
\fB\-\-onto\fR
is specified, the update\-ref command(s) in the output will update the branch(es) in the revision range to point at the new commits, similar to the way how
\fBgit rebase \-\-update\-refs\fR
updates multiple branches in the affected range\&.
.RE
.PP
\-\-advance <branch>
.RS 4
Starting point at which to create the new commits; must be a branch name\&.
.sp
When
\fB\-\-advance\fR
is specified, the update\-ref command(s) in the output will update the branch passed as an argument to
\fB\-\-advance\fR
to point at the new commits (in other words, this mimics a cherry\-pick operation)\&.
.RE
.PP
<revision\-range>
.RS 4
Range of commits to replay\&. More than one <revision\-range> can be passed, but in
\fB\-\-advance <branch>\fR
mode, they should have a single tip, so that it\(cqs clear where <branch> should point to\&. See "Specifying Ranges" in
\fBgit-rev-parse\fR(1)
and the "Commit Limiting" options below\&.
.RE
.SS "Commit Limiting"
.sp
Besides specifying a range of commits that should be listed using the special notations explained in the description, additional commit limiting may be applied\&.
.sp
Using more options generally further limits the output (e\&.g\&. \fB\-\-since=<date1>\fR limits to commits newer than \fB<date1>\fR, and using it with \fB\-\-grep=<pattern>\fR further limits to commits whose log message has a line that matches \fB<pattern>\fR), unless otherwise noted\&.
.sp
Note that these are applied before commit ordering and formatting options, such as \fB\-\-reverse\fR\&.
.PP
\-<number>, \-n <number>, \-\-max\-count=<number>
.RS 4
Limit the number of commits to output\&.
.RE
.PP
\-\-skip=<number>
.RS 4
Skip
\fInumber\fR
commits before starting to show the commit output\&.
.RE
.PP
\-\-since=<date>, \-\-after=<date>
.RS 4
Show commits more recent than a specific date\&.
.RE
.PP
\-\-since\-as\-filter=<date>
.RS 4
Show all commits more recent than a specific date\&. This visits all commits in the range, rather than stopping at the first commit which is older than a specific date\&.
.RE
.PP
\-\-until=<date>, \-\-before=<date>
.RS 4
Show commits older than a specific date\&.
.RE
.PP
\-\-author=<pattern>, \-\-committer=<pattern>
.RS 4
Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression)\&. With more than one
\fB\-\-author=<pattern>\fR, commits whose author matches any of the given patterns are chosen (similarly for multiple
\fB\-\-committer=<pattern>\fR)\&.
.RE
.PP
\-\-grep\-reflog=<pattern>
.RS 4
Limit the commits output to ones with reflog entries that match the specified pattern (regular expression)\&. With more than one
\fB\-\-grep\-reflog\fR, commits whose reflog message matches any of the given patterns are chosen\&. It is an error to use this option unless
\fB\-\-walk\-reflogs\fR
is in use\&.
.RE
.PP
\-\-grep=<pattern>
.RS 4
Limit the commits output to ones with a log message that matches the specified pattern (regular expression)\&. With more than one
\fB\-\-grep=<pattern>\fR, commits whose message matches any of the given patterns are chosen (but see
\fB\-\-all\-match\fR)\&.
.sp
When
\fB\-\-notes\fR
is in effect, the message from the notes is matched as if it were part of the log message\&.
.RE
.PP
\-\-all\-match
.RS 4
Limit the commits output to ones that match all given
\fB\-\-grep\fR, instead of ones that match at least one\&.
.RE
.PP
\-\-invert\-grep
.RS 4
Limit the commits output to ones with a log message that do not match the pattern specified with
\fB\-\-grep=<pattern>\fR\&.
.RE
.PP
\-i, \-\-regexp\-ignore\-case
.RS 4
Match the regular expression limiting patterns without regard to letter case\&.
.RE
.PP
\-\-basic\-regexp
.RS 4
Consider the limiting patterns to be basic regular expressions; this is the default\&.
.RE
.PP
\-E, \-\-extended\-regexp
.RS 4
Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions\&.
.RE
.PP
\-F, \-\-fixed\-strings
.RS 4
Consider the limiting patterns to be fixed strings (don\(cqt interpret pattern as a regular expression)\&.
.RE
.PP
\-P, \-\-perl\-regexp
.RS 4
Consider the limiting patterns to be Perl\-compatible regular expressions\&.
.sp
Support for these types of regular expressions is an optional compile\-time dependency\&. If Git wasn\(cqt compiled with support for them providing this option will cause it to die\&.
.RE
.PP
\-\-remove\-empty
.RS 4
Stop when a given path disappears from the tree\&.
.RE
.PP
\-\-merges
.RS 4
Print only merge commits\&. This is exactly the same as
\fB\-\-min\-parents=2\fR\&.
.RE
.PP
\-\-no\-merges
.RS 4
Do not print commits with more than one parent\&. This is exactly the same as
\fB\-\-max\-parents=1\fR\&.
.RE
.PP
\-\-min\-parents=<number>, \-\-max\-parents=<number>, \-\-no\-min\-parents, \-\-no\-max\-parents
.RS 4
Show only commits which have at least (or at most) that many parent commits\&. In particular,
\fB\-\-max\-parents=1\fR
is the same as
\fB\-\-no\-merges\fR,
\fB\-\-min\-parents=2\fR
is the same as
\fB\-\-merges\fR\&.
\fB\-\-max\-parents=0\fR
gives all root commits and
\fB\-\-min\-parents=3\fR
all octopus merges\&.
.sp
\fB\-\-no\-min\-parents\fR
and
\fB\-\-no\-max\-parents\fR
reset these limits (to no limit) again\&. Equivalent forms are
\fB\-\-min\-parents=0\fR
(any commit has 0 or more parents) and
\fB\-\-max\-parents=\-1\fR
(negative numbers denote no upper limit)\&.
.RE
.PP
\-\-first\-parent
.RS 4
When finding commits to include, follow only the first parent commit upon seeing a merge commit\&. This option can give a better overview when viewing the evolution of a particular topic branch, because merges into a topic branch tend to be only about adjusting to updated upstream from time to time, and this option allows you to ignore the individual commits brought in to your history by such a merge\&.
.RE
.PP
\-\-exclude\-first\-parent\-only
.RS 4
When finding commits to exclude (with a
\fI^\fR), follow only the first parent commit upon seeing a merge commit\&. This can be used to find the set of changes in a topic branch from the point where it diverged from the remote branch, given that arbitrary merges can be valid topic branch changes\&.
.RE
.PP
\-\-not
.RS 4
Reverses the meaning of the
\fI^\fR
prefix (or lack thereof) for all following revision specifiers, up to the next
\fB\-\-not\fR\&. When used on the command line before \-\-stdin, the revisions passed through stdin will not be affected by it\&. Conversely, when passed via standard input, the revisions passed on the command line will not be affected by it\&.
.RE
.PP
\-\-all
.RS 4
Pretend as if all the refs in
\fBrefs/\fR, along with
\fBHEAD\fR, are listed on the command line as
\fI<commit>\fR\&.
.RE
.PP
\-\-branches[=<pattern>]
.RS 4
Pretend as if all the refs in
\fBrefs/heads\fR
are listed on the command line as
\fI<commit>\fR\&. If
\fI<pattern>\fR
is given, limit branches to ones matching given shell glob\&. If pattern lacks
\fI?\fR,
\fI*\fR, or
\fI[\fR,
\fI/*\fR
at the end is implied\&.
.RE
.PP
\-\-tags[=<pattern>]
.RS 4
Pretend as if all the refs in
\fBrefs/tags\fR
are listed on the command line as
\fI<commit>\fR\&. If
\fI<pattern>\fR
is given, limit tags to ones matching given shell glob\&. If pattern lacks
\fI?\fR,
\fI*\fR, or
\fI[\fR,
\fI/*\fR
at the end is implied\&.
.RE
.PP
\-\-remotes[=<pattern>]
.RS 4
Pretend as if all the refs in
\fBrefs/remotes\fR
are listed on the command line as
\fI<commit>\fR\&. If
\fI<pattern>\fR
is given, limit remote\-tracking branches to ones matching given shell glob\&. If pattern lacks
\fI?\fR,
\fI*\fR, or
\fI[\fR,
\fI/*\fR
at the end is implied\&.
.RE
.PP
\-\-glob=<glob\-pattern>
.RS 4
Pretend as if all the refs matching shell glob
\fI<glob\-pattern>\fR
are listed on the command line as
\fI<commit>\fR\&. Leading
\fIrefs/\fR, is automatically prepended if missing\&. If pattern lacks
\fI?\fR,
\fI*\fR, or
\fI[\fR,
\fI/*\fR
at the end is implied\&.
.RE
.PP
\-\-exclude=<glob\-pattern>
.RS 4
Do not include refs matching
\fI<glob\-pattern>\fR
that the next
\fB\-\-all\fR,
\fB\-\-branches\fR,
\fB\-\-tags\fR,
\fB\-\-remotes\fR, or
\fB\-\-glob\fR
would otherwise consider\&. Repetitions of this option accumulate exclusion patterns up to the next
\fB\-\-all\fR,
\fB\-\-branches\fR,
\fB\-\-tags\fR,
\fB\-\-remotes\fR, or
\fB\-\-glob\fR
option (other options or arguments do not clear accumulated patterns)\&.
.sp
The patterns given should not begin with
\fBrefs/heads\fR,
\fBrefs/tags\fR, or
\fBrefs/remotes\fR
when applied to
\fB\-\-branches\fR,
\fB\-\-tags\fR, or
\fB\-\-remotes\fR, respectively, and they must begin with
\fBrefs/\fR
when applied to
\fB\-\-glob\fR
or
\fB\-\-all\fR\&. If a trailing
\fI/*\fR
is intended, it must be given explicitly\&.
.RE
.PP
\-\-exclude\-hidden=[fetch|receive|uploadpack]
.RS 4
Do not include refs that would be hidden by
\fBgit\-fetch\fR,
\fBgit\-receive\-pack\fR
or
\fBgit\-upload\-pack\fR
by consulting the appropriate
\fBfetch\&.hideRefs\fR,
\fBreceive\&.hideRefs\fR
or
\fBuploadpack\&.hideRefs\fR
configuration along with
\fBtransfer\&.hideRefs\fR
(see
\fBgit-config\fR(1))\&. This option affects the next pseudo\-ref option
\fB\-\-all\fR
or
\fB\-\-glob\fR
and is cleared after processing them\&.
.RE
.PP
\-\-reflog
.RS 4
Pretend as if all objects mentioned by reflogs are listed on the command line as
\fB<commit>\fR\&.
.RE
.PP
\-\-alternate\-refs
.RS 4
Pretend as if all objects mentioned as ref tips of alternate repositories were listed on the command line\&. An alternate repository is any repository whose object directory is specified in
\fBobjects/info/alternates\fR\&. The set of included objects may be modified by
\fBcore\&.alternateRefsCommand\fR, etc\&. See
\fBgit-config\fR(1)\&.
.RE
.PP
\-\-single\-worktree
.RS 4
By default, all working trees will be examined by the following options when there are more than one (see
\fBgit-worktree\fR(1)):
\fB\-\-all\fR,
\fB\-\-reflog\fR
and
\fB\-\-indexed\-objects\fR\&. This option forces them to examine the current working tree only\&.
.RE
.PP
\-\-ignore\-missing
.RS 4
Upon seeing an invalid object name in the input, pretend as if the bad input was not given\&.
.RE
.PP
\-\-bisect
.RS 4
Pretend as if the bad bisection ref
\fBrefs/bisect/bad\fR
was listed and as if it was followed by
\fB\-\-not\fR
and the good bisection refs
\fBrefs/bisect/good\-*\fR
on the command line\&.
.RE
.PP
\-\-stdin
.RS 4
In addition to getting arguments from the command line, read them from standard input as well\&. This accepts commits and pseudo\-options like
\fB\-\-all\fR
and
\fB\-\-glob=\fR\&. When a
\fB\-\-\fR
separator is seen, the following input is treated as paths and used to limit the result\&. Flags like
\fB\-\-not\fR
which are read via standard input are only respected for arguments passed in the same way and will not influence any subsequent command line arguments\&.
.RE
.PP
\-\-cherry\-mark
.RS 4
Like
\fB\-\-cherry\-pick\fR
(see below) but mark equivalent commits with
\fB=\fR
rather than omitting them, and inequivalent ones with
\fB+\fR\&.
.RE
.PP
\-\-cherry\-pick
.RS 4
Omit any commit that introduces the same change as another commit on the \(lqother side\(rq when the set of commits are limited with symmetric difference\&.
.sp
For example, if you have two branches,
\fBA\fR
and
\fBB\fR, a usual way to list all commits on only one side of them is with
\fB\-\-left\-right\fR
(see the example below in the description of the
\fB\-\-left\-right\fR
option)\&. However, it shows the commits that were cherry\-picked from the other branch (for example, \(lq3rd on b\(rq may be cherry\-picked from branch A)\&. With this option, such pairs of commits are excluded from the output\&.
.RE
.PP
\-\-left\-only, \-\-right\-only
.RS 4
List only commits on the respective side of a symmetric difference, i\&.e\&. only those which would be marked
\fB<\fR
resp\&.
\fB>\fR
by
\fB\-\-left\-right\fR\&.
.sp
For example,
\fB\-\-cherry\-pick \-\-right\-only A\&.\&.\&.B\fR
omits those commits from
\fBB\fR
which are in
\fBA\fR
or are patch\-equivalent to a commit in
\fBA\fR\&. In other words, this lists the
\fB+\fR
commits from
\fBgit cherry A B\fR\&. More precisely,
\fB\-\-cherry\-pick \-\-right\-only \-\-no\-merges\fR
gives the exact list\&.
.RE
.PP
\-\-cherry
.RS 4
A synonym for
\fB\-\-right\-only \-\-cherry\-mark \-\-no\-merges\fR; useful to limit the output to the commits on our side and mark those that have been applied to the other side of a forked history with
\fBgit log \-\-cherry upstream\&.\&.\&.mybranch\fR, similar to
\fBgit cherry upstream mybranch\fR\&.
.RE
.PP
\-g, \-\-walk\-reflogs
.RS 4
Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones\&. When this option is used you cannot specify commits to exclude (that is,
\fI^commit\fR,
\fIcommit1\&.\&.commit2\fR, and
\fIcommit1\&.\&.\&.commit2\fR
notations cannot be used)\&.
.sp
With
\fB\-\-pretty\fR
format other than
\fBoneline\fR
and
\fBreference\fR
(for obvious reasons), this causes the output to have two extra lines of information taken from the reflog\&. The reflog designator in the output may be shown as
\fBref@{<Nth>}\fR
(where
\fI<Nth>\fR
is the reverse\-chronological index in the reflog) or as
\fBref@{<timestamp>}\fR
(with the
\fI<timestamp>\fR
for that entry), depending on a few rules:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
If the starting point is specified as
\fBref@{<Nth>}\fR, show the index format\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
If the starting point was specified as
\fBref@{now}\fR, show the timestamp format\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
If neither was used, but
\fB\-\-date\fR
was given on the command line, show the timestamp in the format requested by
\fB\-\-date\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Otherwise, show the index format\&.
.RE
.sp
Under
\fB\-\-pretty=oneline\fR, the commit message is prefixed with this information on the same line\&. This option cannot be combined with
\fB\-\-reverse\fR\&. See also
\fBgit-reflog\fR(1)\&.
.sp
Under
\fB\-\-pretty=reference\fR, this information will not be shown at all\&.
.RE
.PP
\-\-merge
.RS 4
Show commits touching conflicted paths in the range
\fBHEAD\&.\&.\&.<other>\fR, where
\fB<other>\fR
is the first existing pseudoref in
\fBMERGE_HEAD\fR,
\fBCHERRY_PICK_HEAD\fR,
\fBREVERT_HEAD\fR
or
\fBREBASE_HEAD\fR\&. Only works when the index has unmerged entries\&. This option can be used to show relevant commits when resolving conflicts from a 3\-way merge\&.
.RE
.PP
\-\-boundary
.RS 4
Output excluded boundary commits\&. Boundary commits are prefixed with
\fB\-\fR\&.
.RE
.SS "History Simplification"
.sp
Sometimes you are only interested in parts of the history, for example the commits modifying a particular <path>\&. But there are two parts of \fIHistory Simplification\fR, one part is selecting the commits and the other is how to do it, as there are various strategies to simplify the history\&.
.sp
The following options select the commits to be shown:
.PP
<paths>
.RS 4
Commits modifying the given <paths> are selected\&.
.RE
.PP
\-\-simplify\-by\-decoration
.RS 4
Commits that are referred by some branch or tag are selected\&.
.RE
.sp
Note that extra commits can be shown to give a meaningful history\&.
.sp
The following options affect the way the simplification is performed:
.PP
Default mode
.RS 4
Simplifies the history to the simplest history explaining the final state of the tree\&. Simplest because it prunes some side branches if the end result is the same (i\&.e\&. merging branches with the same content)
.RE
.PP
\-\-show\-pulls
.RS 4
Include all commits from the default mode, but also any merge commits that are not TREESAME to the first parent but are TREESAME to a later parent\&. This mode is helpful for showing the merge commits that "first introduced" a change to a branch\&.
.RE
.PP
\-\-full\-history
.RS 4
Same as the default mode, but does not prune some history\&.
.RE
.PP
\-\-dense
.RS 4
Only the selected commits are shown, plus some to have a meaningful history\&.
.RE
.PP
\-\-sparse
.RS 4
All commits in the simplified history are shown\&.
.RE
.PP
\-\-simplify\-merges
.RS 4
Additional option to
\fB\-\-full\-history\fR
to remove some needless merges from the resulting history, as there are no selected commits contributing to this merge\&.
.RE
.PP
\-\-ancestry\-path[=<commit>]
.RS 4
When given a range of commits to display (e\&.g\&.
\fIcommit1\&.\&.commit2\fR
or
\fIcommit2 ^commit1\fR), only display commits in that range that are ancestors of <commit>, descendants of <commit>, or <commit> itself\&. If no commit is specified, use
\fIcommit1\fR
(the excluded part of the range) as <commit>\&. Can be passed multiple times; if so, a commit is included if it is any of the commits given or if it is an ancestor or descendant of one of them\&.
.RE
.sp
A more detailed explanation follows\&.
.sp
Suppose you specified \fBfoo\fR as the <paths>\&. We shall call commits that modify \fBfoo\fR !TREESAME, and the rest TREESAME\&. (In a diff filtered for \fBfoo\fR, they look different and equal, respectively\&.)
.sp
In the following, we will always refer to the same example history to illustrate the differences between simplification settings\&. We assume that you are filtering for a file \fBfoo\fR in this commit graph:
.sp
.if n \{\
.RS 4
.\}
.nf
          \&.\-A\-\-\-M\-\-\-N\-\-\-O\-\-\-P\-\-\-Q
         /     /   /   /   /   /
        I     B   C   D   E   Y
         \e   /   /   /   /   /
          `\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq   X
.fi
.if n \{\
.RE
.\}
.sp
.sp
The horizontal line of history A\-\-\-Q is taken to be the first parent of each merge\&. The commits are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBI\fR
is the initial commit, in which
\fBfoo\fR
exists with contents \(lqasdf\(rq, and a file
\fBquux\fR
exists with contents \(lqquux\(rq\&. Initial commits are compared to an empty tree, so
\fBI\fR
is !TREESAME\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
In
\fBA\fR,
\fBfoo\fR
contains just \(lqfoo\(rq\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBB\fR
contains the same change as
\fBA\fR\&. Its merge
\fBM\fR
is trivial and hence TREESAME to all parents\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBC\fR
does not change
\fBfoo\fR, but its merge
\fBN\fR
changes it to \(lqfoobar\(rq, so it is not TREESAME to any parent\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBD\fR
sets
\fBfoo\fR
to \(lqbaz\(rq\&. Its merge
\fBO\fR
combines the strings from
\fBN\fR
and
\fBD\fR
to \(lqfoobarbaz\(rq; i\&.e\&., it is not TREESAME to any parent\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBE\fR
changes
\fBquux\fR
to \(lqxyzzy\(rq, and its merge
\fBP\fR
combines the strings to \(lqquux xyzzy\(rq\&.
\fBP\fR
is TREESAME to
\fBO\fR, but not to
\fBE\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBX\fR
is an independent root commit that added a new file
\fBside\fR, and
\fBY\fR
modified it\&.
\fBY\fR
is TREESAME to
\fBX\fR\&. Its merge
\fBQ\fR
added
\fBside\fR
to
\fBP\fR, and
\fBQ\fR
is TREESAME to
\fBP\fR, but not to
\fBY\fR\&.
.RE
.sp
\fBrev\-list\fR walks backwards through history, including or excluding commits based on whether \fB\-\-full\-history\fR and/or parent rewriting (via \fB\-\-parents\fR or \fB\-\-children\fR) are used\&. The following settings are available\&.
.PP
Default mode
.RS 4
Commits are included if they are not TREESAME to any parent (though this can be changed, see
\fB\-\-sparse\fR
below)\&. If the commit was a merge, and it was TREESAME to one parent, follow only that parent\&. (Even if there are several TREESAME parents, follow only one of them\&.) Otherwise, follow all parents\&.
.sp
This results in:
.sp
.if n \{\
.RS 4
.\}
.nf
          \&.\-A\-\-\-N\-\-\-O
         /     /   /
        I\-\-\-\-\-\-\-\-\-D
.fi
.if n \{\
.RE
.\}
.sp
Note how the rule to only follow the TREESAME parent, if one is available, removed
\fBB\fR
from consideration entirely\&.
\fBC\fR
was considered via
\fBN\fR, but is TREESAME\&. Root commits are compared to an empty tree, so
\fBI\fR
is !TREESAME\&.
.sp
Parent/child relations are only visible with
\fB\-\-parents\fR, but that does not affect the commits selected in default mode, so we have shown the parent lines\&.
.RE
.PP
\-\-full\-history without parent rewriting
.RS 4
This mode differs from the default in one point: always follow all parents of a merge, even if it is TREESAME to one of them\&. Even if more than one side of the merge has commits that are included, this does not imply that the merge itself is! In the example, we get
.sp
.if n \{\
.RS 4
.\}
.nf
        I  A  B  N  D  O  P  Q
.fi
.if n \{\
.RE
.\}
.sp
\fBM\fR
was excluded because it is TREESAME to both parents\&.
\fBE\fR,
\fBC\fR
and
\fBB\fR
were all walked, but only
\fBB\fR
was !TREESAME, so the others do not appear\&.
.sp
Note that without parent rewriting, it is not really possible to talk about the parent/child relationships between the commits, so we show them disconnected\&.
.RE
.PP
\-\-full\-history with parent rewriting
.RS 4
Ordinary commits are only included if they are !TREESAME (though this can be changed, see
\fB\-\-sparse\fR
below)\&.
.sp
Merges are always included\&. However, their parent list is rewritten: Along each parent, prune away commits that are not included themselves\&. This results in
.sp
.if n \{\
.RS 4
.\}
.nf
          \&.\-A\-\-\-M\-\-\-N\-\-\-O\-\-\-P\-\-\-Q
         /     /   /   /   /
        I     B   /   D   /
         \e   /   /   /   /
          `\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
Compare to
\fB\-\-full\-history\fR
without rewriting above\&. Note that
\fBE\fR
was pruned away because it is TREESAME, but the parent list of P was rewritten to contain
\fBE\fR\*(Aqs parent
\fBI\fR\&. The same happened for
\fBC\fR
and
\fBN\fR, and
\fBX\fR,
\fBY\fR
and
\fBQ\fR\&.
.RE
.sp
In addition to the above settings, you can change whether TREESAME affects inclusion:
.PP
\-\-dense
.RS 4
Commits that are walked are included if they are not TREESAME to any parent\&.
.RE
.PP
\-\-sparse
.RS 4
All commits that are walked are included\&.
.sp
Note that without
\fB\-\-full\-history\fR, this still simplifies merges: if one of the parents is TREESAME, we follow only that one, so the other sides of the merge are never walked\&.
.RE
.PP
\-\-simplify\-merges
.RS 4
First, build a history graph in the same way that
\fB\-\-full\-history\fR
with parent rewriting does (see above)\&.
.sp
Then simplify each commit
\fBC\fR
to its replacement
\fBC\*(Aq\fR
in the final history according to the following rules:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Set
\fBC\*(Aq\fR
to
\fBC\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Replace each parent
\fBP\fR
of
\fBC\*(Aq\fR
with its simplification
\fBP\*(Aq\fR\&. In the process, drop parents that are ancestors of other parents or that are root commits TREESAME to an empty tree, and remove duplicates, but take care to never drop all parents that we are TREESAME to\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If after this parent rewriting,
\fBC\*(Aq\fR
is a root or merge commit (has zero or >1 parents), a boundary commit, or !TREESAME, it remains\&. Otherwise, it is replaced with its only parent\&.
.RE
.sp
The effect of this is best shown by way of comparing to
\fB\-\-full\-history\fR
with parent rewriting\&. The example turns into:
.sp
.if n \{\
.RS 4
.\}
.nf
          \&.\-A\-\-\-M\-\-\-N\-\-\-O
         /     /       /
        I     B       D
         \e   /       /
          `\-\-\-\-\-\-\-\-\-\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
Note the major differences in
\fBN\fR,
\fBP\fR, and
\fBQ\fR
over
\fB\-\-full\-history\fR:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBN\fR\*(Aqs parent list had
\fBI\fR
removed, because it is an ancestor of the other parent
\fBM\fR\&. Still,
\fBN\fR
remained because it is !TREESAME\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBP\fR\*(Aqs parent list similarly had
\fBI\fR
removed\&.
\fBP\fR
was then removed completely, because it had one parent and is TREESAME\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBQ\fR\*(Aqs parent list had
\fBY\fR
simplified to
\fBX\fR\&.
\fBX\fR
was then removed, because it was a TREESAME root\&.
\fBQ\fR
was then removed completely, because it had one parent and is TREESAME\&.
.RE
.RE
.sp
There is another simplification mode available:
.PP
\-\-ancestry\-path[=<commit>]
.RS 4
Limit the displayed commits to those which are an ancestor of <commit>, or which are a descendant of <commit>, or are <commit> itself\&.
.sp
As an example use case, consider the following commit history:
.sp
.if n \{\
.RS 4
.\}
.nf
            D\-\-\-E\-\-\-\-\-\-\-F
           /     \e       \e
          B\-\-\-C\-\-\-G\-\-\-H\-\-\-I\-\-\-J
         /                     \e
        A\-\-\-\-\-\-\-K\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-L\-\-M
.fi
.if n \{\
.RE
.\}
.sp
A regular
\fID\&.\&.M\fR
computes the set of commits that are ancestors of
\fBM\fR, but excludes the ones that are ancestors of
\fBD\fR\&. This is useful to see what happened to the history leading to
\fBM\fR
since
\fBD\fR, in the sense that \(lqwhat does
\fBM\fR
have that did not exist in
\fBD\fR\(rq\&. The result in this example would be all the commits, except
\fBA\fR
and
\fBB\fR
(and
\fBD\fR
itself, of course)\&.
.sp
When we want to find out what commits in
\fBM\fR
are contaminated with the bug introduced by
\fBD\fR
and need fixing, however, we might want to view only the subset of
\fID\&.\&.M\fR
that are actually descendants of
\fBD\fR, i\&.e\&. excluding
\fBC\fR
and
\fBK\fR\&. This is exactly what the
\fB\-\-ancestry\-path\fR
option does\&. Applied to the
\fID\&.\&.M\fR
range, it results in:
.sp
.if n \{\
.RS 4
.\}
.nf
                E\-\-\-\-\-\-\-F
                 \e       \e
                  G\-\-\-H\-\-\-I\-\-\-J
                               \e
                                L\-\-M
.fi
.if n \{\
.RE
.\}
.sp
We can also use
\fB\-\-ancestry\-path=D\fR
instead of
\fB\-\-ancestry\-path\fR
which means the same thing when applied to the
\fID\&.\&.M\fR
range but is just more explicit\&.
.sp
If we instead are interested in a given topic within this range, and all commits affected by that topic, we may only want to view the subset of
\fBD\&.\&.M\fR
which contain that topic in their ancestry path\&. So, using
\fB\-\-ancestry\-path=H D\&.\&.M\fR
for example would result in:
.sp
.if n \{\
.RS 4
.\}
.nf
                E
                 \e
                  G\-\-\-H\-\-\-I\-\-\-J
                               \e
                                L\-\-M
.fi
.if n \{\
.RE
.\}
.sp
Whereas
\fB\-\-ancestry\-path=K D\&.\&.M\fR
would result in
.sp
.if n \{\
.RS 4
.\}
.nf
                K\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-L\-\-M
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
Before discussing another option, \fB\-\-show\-pulls\fR, we need to create a new example history\&.
.sp
A common problem users face when looking at simplified history is that a commit they know changed a file somehow does not appear in the file\(cqs simplified history\&. Let\(cqs demonstrate a new example and show how options such as \fB\-\-full\-history\fR and \fB\-\-simplify\-merges\fR works in that case:
.sp
.if n \{\
.RS 4
.\}
.nf
          \&.\-A\-\-\-M\-\-\-\-\-C\-\-N\-\-\-O\-\-\-P
         /     / \e  \e  \e/   /   /
        I     B   \e  R\-\*(Aq`\-Z\*(Aq   /
         \e   /     \e/         /
          \e /      /\e        /
           `\-\-\-X\-\-\*(Aq  `\-\-\-Y\-\-\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
For this example, suppose \fBI\fR created \fBfile\&.txt\fR which was modified by \fBA\fR, \fBB\fR, and \fBX\fR in different ways\&. The single\-parent commits \fBC\fR, \fBZ\fR, and \fBY\fR do not change \fBfile\&.txt\fR\&. The merge commit \fBM\fR was created by resolving the merge conflict to include both changes from \fBA\fR and \fBB\fR and hence is not TREESAME to either\&. The merge commit \fBR\fR, however, was created by ignoring the contents of \fBfile\&.txt\fR at \fBM\fR and taking only the contents of \fBfile\&.txt\fR at \fBX\fR\&. Hence, \fBR\fR is TREESAME to \fBX\fR but not \fBM\fR\&. Finally, the natural merge resolution to create \fBN\fR is to take the contents of \fBfile\&.txt\fR at \fBR\fR, so \fBN\fR is TREESAME to \fBR\fR but not \fBC\fR\&. The merge commits \fBO\fR and \fBP\fR are TREESAME to their first parents, but not to their second parents, \fBZ\fR and \fBY\fR respectively\&.
.sp
When using the default mode, \fBN\fR and \fBR\fR both have a TREESAME parent, so those edges are walked and the others are ignored\&. The resulting history graph is:
.sp
.if n \{\
.RS 4
.\}
.nf
        I\-\-\-X
.fi
.if n \{\
.RE
.\}
.sp
.sp
When using \fB\-\-full\-history\fR, Git walks every edge\&. This will discover the commits \fBA\fR and \fBB\fR and the merge \fBM\fR, but also will reveal the merge commits \fBO\fR and \fBP\fR\&. With parent rewriting, the resulting graph is:
.sp
.if n \{\
.RS 4
.\}
.nf
          \&.\-A\-\-\-M\-\-\-\-\-\-\-\-N\-\-\-O\-\-\-P
         /     / \e  \e  \e/   /   /
        I     B   \e  R\-\*(Aq`\-\-\*(Aq   /
         \e   /     \e/         /
          \e /      /\e        /
           `\-\-\-X\-\-\*(Aq  `\-\-\-\-\-\-\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
Here, the merge commits \fBO\fR and \fBP\fR contribute extra noise, as they did not actually contribute a change to \fBfile\&.txt\fR\&. They only merged a topic that was based on an older version of \fBfile\&.txt\fR\&. This is a common issue in repositories using a workflow where many contributors work in parallel and merge their topic branches along a single trunk: many unrelated merges appear in the \fB\-\-full\-history\fR results\&.
.sp
When using the \fB\-\-simplify\-merges\fR option, the commits \fBO\fR and \fBP\fR disappear from the results\&. This is because the rewritten second parents of \fBO\fR and \fBP\fR are reachable from their first parents\&. Those edges are removed and then the commits look like single\-parent commits that are TREESAME to their parent\&. This also happens to the commit \fBN\fR, resulting in a history view as follows:
.sp
.if n \{\
.RS 4
.\}
.nf
          \&.\-A\-\-\-M\-\-\&.
         /     /    \e
        I     B      R
         \e   /      /
          \e /      /
           `\-\-\-X\-\-\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
In this view, we see all of the important single\-parent changes from \fBA\fR, \fBB\fR, and \fBX\fR\&. We also see the carefully\-resolved merge \fBM\fR and the not\-so\-carefully\-resolved merge \fBR\fR\&. This is usually enough information to determine why the commits \fBA\fR and \fBB\fR "disappeared" from history in the default view\&. However, there are a few issues with this approach\&.
.sp
The first issue is performance\&. Unlike any previous option, the \fB\-\-simplify\-merges\fR option requires walking the entire commit history before returning a single result\&. This can make the option difficult to use for very large repositories\&.
.sp
The second issue is one of auditing\&. When many contributors are working on the same repository, it is important which merge commits introduced a change into an important branch\&. The problematic merge \fBR\fR above is not likely to be the merge commit that was used to merge into an important branch\&. Instead, the merge \fBN\fR was used to merge \fBR\fR and \fBX\fR into the important branch\&. This commit may have information about why the change \fBX\fR came to override the changes from \fBA\fR and \fBB\fR in its commit message\&.
.PP
\-\-show\-pulls
.RS 4
In addition to the commits shown in the default history, show each merge commit that is not TREESAME to its first parent but is TREESAME to a later parent\&.
.sp
When a merge commit is included by
\fB\-\-show\-pulls\fR, the merge is treated as if it "pulled" the change from another branch\&. When using
\fB\-\-show\-pulls\fR
on this example (and no other options) the resulting graph is:
.sp
.if n \{\
.RS 4
.\}
.nf
        I\-\-\-X\-\-\-R\-\-\-N
.fi
.if n \{\
.RE
.\}
.sp
Here, the merge commits
\fBR\fR
and
\fBN\fR
are included because they pulled the commits
\fBX\fR
and
\fBR\fR
into the base branch, respectively\&. These merges are the reason the commits
\fBA\fR
and
\fBB\fR
do not appear in the default history\&.
.sp
When
\fB\-\-show\-pulls\fR
is paired with
\fB\-\-simplify\-merges\fR, the graph includes all of the necessary information:
.sp
.if n \{\
.RS 4
.\}
.nf
          \&.\-A\-\-\-M\-\-\&.   N
         /     /    \e /
        I     B      R
         \e   /      /
          \e /      /
           `\-\-\-X\-\-\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
Notice that since
\fBM\fR
is reachable from
\fBR\fR, the edge from
\fBN\fR
to
\fBM\fR
was simplified away\&. However,
\fBN\fR
still appears in the history as an important commit because it "pulled" the change
\fBR\fR
into the main branch\&.
.RE
.sp
The \fB\-\-simplify\-by\-decoration\fR option allows you to view only the big picture of the topology of the history, by omitting commits that are not referenced by tags\&. Commits are marked as !TREESAME (in other words, kept after history simplification rules described above) if (1) they are referenced by tags, or (2) they change the contents of the paths given on the command line\&. All other commits are marked as TREESAME (subject to be simplified away)\&.
.SS "Commit Ordering"
.sp
By default, the commits are shown in reverse chronological order\&.
.PP
\-\-date\-order
.RS 4
Show no parents before all of its children are shown, but otherwise show commits in the commit timestamp order\&.
.RE
.PP
\-\-author\-date\-order
.RS 4
Show no parents before all of its children are shown, but otherwise show commits in the author timestamp order\&.
.RE
.PP
\-\-topo\-order
.RS 4
Show no parents before all of its children are shown, and avoid showing commits on multiple lines of history intermixed\&.
.sp
For example, in a commit history like this:
.sp
.if n \{\
.RS 4
.\}
.nf
    \-\-\-1\-\-\-\-2\-\-\-\-4\-\-\-\-7
        \e              \e
         3\-\-\-\-5\-\-\-\-6\-\-\-\-8\-\-\-
.fi
.if n \{\
.RE
.\}
.sp
where the numbers denote the order of commit timestamps,
\fBgit rev\-list\fR
and friends with
\fB\-\-date\-order\fR
show the commits in the timestamp order: 8 7 6 5 4 3 2 1\&.
.sp
With
\fB\-\-topo\-order\fR, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5 3 1); some older commits are shown before newer ones in order to avoid showing the commits from two parallel development track mixed together\&.
.RE
.PP
\-\-reverse
.RS 4
Output the commits chosen to be shown (see Commit Limiting section above) in reverse order\&. Cannot be combined with
\fB\-\-walk\-reflogs\fR\&.
.RE
.SS "Object Traversal"
.sp
These options are mostly targeted for packing of Git repositories\&.
.PP
\-\-no\-walk[=(sorted|unsorted)]
.RS 4
Only show the given commits, but do not traverse their ancestors\&. This has no effect if a range is specified\&. If the argument
\fBunsorted\fR
is given, the commits are shown in the order they were given on the command line\&. Otherwise (if
\fBsorted\fR
or no argument was given), the commits are shown in reverse chronological order by commit time\&. Cannot be combined with
\fB\-\-graph\fR\&.
.RE
.PP
\-\-do\-walk
.RS 4
Overrides a previous
\fB\-\-no\-walk\fR\&.
.RE
.SS "Commit Formatting"
.PP
\-\-pretty[=<format>], \-\-format=<format>
.RS 4
Pretty\-print the contents of the commit logs in a given format, where
\fI<format>\fR
can be one of
\fIoneline\fR,
\fIshort\fR,
\fImedium\fR,
\fIfull\fR,
\fIfuller\fR,
\fIreference\fR,
\fIemail\fR,
\fIraw\fR,
\fIformat:<string>\fR
and
\fItformat:<string>\fR\&. When
\fI<format>\fR
is none of the above, and has
\fI%placeholder\fR
in it, it acts as if
\fI\-\-pretty=tformat:<format>\fR
were given\&.
.sp
See the "PRETTY FORMATS" section for some additional details for each format\&. When
\fI=<format>\fR
part is omitted, it defaults to
\fImedium\fR\&.
.sp
Note: you can specify the default pretty format in the repository configuration (see
\fBgit-config\fR(1))\&.
.RE
.PP
\-\-abbrev\-commit
.RS 4
Instead of showing the full 40\-byte hexadecimal commit object name, show a prefix that names the object uniquely\&. "\-\-abbrev=<n>" (which also modifies diff output, if it is displayed) option can be used to specify the minimum length of the prefix\&.
.sp
This should make "\-\-pretty=oneline" a whole lot more readable for people using 80\-column terminals\&.
.RE
.PP
\-\-no\-abbrev\-commit
.RS 4
Show the full 40\-byte hexadecimal commit object name\&. This negates
\fB\-\-abbrev\-commit\fR, either explicit or implied by other options such as "\-\-oneline"\&. It also overrides the
\fBlog\&.abbrevCommit\fR
variable\&.
.RE
.PP
\-\-oneline
.RS 4
This is a shorthand for "\-\-pretty=oneline \-\-abbrev\-commit" used together\&.
.RE
.PP
\-\-encoding=<encoding>
.RS 4
Commit objects record the character encoding used for the log message in their encoding header; this option can be used to tell the command to re\-code the commit log message in the encoding preferred by the user\&. For non plumbing commands this defaults to UTF\-8\&. Note that if an object claims to be encoded in
\fBX\fR
and we are outputting in
\fBX\fR, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output\&. Likewise, if iconv(3) fails to convert the commit, we will quietly output the original object verbatim\&.
.RE
.PP
\-\-expand\-tabs=<n>, \-\-expand\-tabs, \-\-no\-expand\-tabs
.RS 4
Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is a multiple of
\fI<n>\fR) in the log message before showing it in the output\&.
\fB\-\-expand\-tabs\fR
is a short\-hand for
\fB\-\-expand\-tabs=8\fR, and
\fB\-\-no\-expand\-tabs\fR
is a short\-hand for
\fB\-\-expand\-tabs=0\fR, which disables tab expansion\&.
.sp
By default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i\&.e\&.
\fImedium\fR, which is the default,
\fIfull\fR, and
\fIfuller\fR)\&.
.RE
.PP
\-\-notes[=<ref>]
.RS 4
Show the notes (see
\fBgit-notes\fR(1)) that annotate the commit, when showing the commit log message\&. This is the default for
\fBgit log\fR,
\fBgit show\fR
and
\fBgit whatchanged\fR
commands when there is no
\fB\-\-pretty\fR,
\fB\-\-format\fR, or
\fB\-\-oneline\fR
option given on the command line\&.
.sp
By default, the notes shown are from the notes refs listed in the
\fBcore\&.notesRef\fR
and
\fBnotes\&.displayRef\fR
variables (or corresponding environment overrides)\&. See
\fBgit-config\fR(1)
for more details\&.
.sp
With an optional
\fI<ref>\fR
argument, use the ref to find the notes to display\&. The ref can specify the full refname when it begins with
\fBrefs/notes/\fR; when it begins with
\fBnotes/\fR,
\fBrefs/\fR
and otherwise
\fBrefs/notes/\fR
is prefixed to form the full name of the ref\&.
.sp
Multiple \-\-notes options can be combined to control which notes are being displayed\&. Examples: "\-\-notes=foo" will show only notes from "refs/notes/foo"; "\-\-notes=foo \-\-notes" will show both notes from "refs/notes/foo" and from the default notes ref(s)\&.
.RE
.PP
\-\-no\-notes
.RS 4
Do not show notes\&. This negates the above
\fB\-\-notes\fR
option, by resetting the list of notes refs from which notes are shown\&. Options are parsed in the order given on the command line, so e\&.g\&. "\-\-notes \-\-notes=foo \-\-no\-notes \-\-notes=bar" will only show notes from "refs/notes/bar"\&.
.RE
.PP
\-\-show\-notes\-by\-default
.RS 4
Show the default notes unless options for displaying specific notes are given\&.
.RE
.PP
\-\-show\-notes[=<ref>], \-\-[no\-]standard\-notes
.RS 4
These options are deprecated\&. Use the above \-\-notes/\-\-no\-notes options instead\&.
.RE
.PP
\-\-show\-signature
.RS 4
Check the validity of a signed commit object by passing the signature to
\fBgpg \-\-verify\fR
and show the output\&.
.RE
.PP
\-\-relative\-date
.RS 4
Synonym for
\fB\-\-date=relative\fR\&.
.RE
.PP
\-\-date=<format>
.RS 4
Only takes effect for dates shown in human\-readable format, such as when using
\fB\-\-pretty\fR\&.
\fBlog\&.date\fR
config variable sets a default value for the log command\(cqs
\fB\-\-date\fR
option\&. By default, dates are shown in the original time zone (either committer\(cqs or author\(cqs)\&. If
\fB\-local\fR
is appended to the format (e\&.g\&.,
\fBiso\-local\fR), the user\(cqs local time zone is used instead\&.
.sp
\fB\-\-date=relative\fR
shows dates relative to the current time, e\&.g\&. \(lq2 hours ago\(rq\&. The
\fB\-local\fR
option has no effect for
\fB\-\-date=relative\fR\&.
.sp
\fB\-\-date=local\fR
is an alias for
\fB\-\-date=default\-local\fR\&.
.sp
\fB\-\-date=iso\fR
(or
\fB\-\-date=iso8601\fR) shows timestamps in a ISO 8601\-like format\&. The differences to the strict ISO 8601 format are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a space instead of the
\fBT\fR
date/time delimiter
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a space between time and time zone
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
no colon between hours and minutes of the time zone
.RE
.sp
\fB\-\-date=iso\-strict\fR
(or
\fB\-\-date=iso8601\-strict\fR) shows timestamps in strict ISO 8601 format\&.
.sp
\fB\-\-date=rfc\fR
(or
\fB\-\-date=rfc2822\fR) shows timestamps in RFC 2822 format, often found in email messages\&.
.sp
\fB\-\-date=short\fR
shows only the date, but not the time, in
\fBYYYY\-MM\-DD\fR
format\&.
.sp
\fB\-\-date=raw\fR
shows the date as seconds since the epoch (1970\-01\-01 00:00:00 UTC), followed by a space, and then the timezone as an offset from UTC (a
\fB+\fR
or
\fB\-\fR
with four digits; the first two are hours, and the second two are minutes)\&. I\&.e\&., as if the timestamp were formatted with
\fBstrftime("%s %z")\fR)\&. Note that the
\fB\-local\fR
option does not affect the seconds\-since\-epoch value (which is always measured in UTC), but does switch the accompanying timezone value\&.
.sp
\fB\-\-date=human\fR
shows the timezone if the timezone does not match the current time\-zone, and doesn\(cqt print the whole date if that matches (ie skip printing year for dates that are "this year", but also skip the whole date itself if it\(cqs in the last few days and we can just say what weekday it was)\&. For older dates the hour and minute is also omitted\&.
.sp
\fB\-\-date=unix\fR
shows the date as a Unix epoch timestamp (seconds since 1970)\&. As with
\fB\-\-raw\fR, this is always in UTC and therefore
\fB\-local\fR
has no effect\&.
.sp
\fB\-\-date=format:\&.\&.\&.\fR
feeds the format
\fB\&.\&.\&.\fR
to your system
\fBstrftime\fR, except for %s, %z, and %Z, which are handled internally\&. Use
\fB\-\-date=format:%c\fR
to show the date in your system locale\(cqs preferred format\&. See the
\fBstrftime\fR
manual for a complete list of format placeholders\&. When using
\fB\-local\fR, the correct syntax is
\fB\-\-date=format\-local:\&.\&.\&.\fR\&.
.sp
\fB\-\-date=default\fR
is the default format, and is based on ctime(3) output\&. It shows a single line with three\-letter day of the week, three\-letter month, day\-of\-month, hour\-minute\-seconds in "HH:MM:SS" format, followed by 4\-digit year, plus timezone information, unless the local time zone is used, e\&.g\&.
\fBThu Jan 1 00:00:00 1970 +0000\fR\&.
.RE
.PP
\-\-parents
.RS 4
Print also the parents of the commit (in the form "commit parent\&...")\&. Also enables parent rewriting, see
\fIHistory Simplification\fR
above\&.
.RE
.PP
\-\-children
.RS 4
Print also the children of the commit (in the form "commit child\&...")\&. Also enables parent rewriting, see
\fIHistory Simplification\fR
above\&.
.RE
.PP
\-\-left\-right
.RS 4
Mark which side of a symmetric difference a commit is reachable from\&. Commits from the left side are prefixed with
\fB<\fR
and those from the right with
\fB>\fR\&. If combined with
\fB\-\-boundary\fR, those commits are prefixed with
\fB\-\fR\&.
.sp
For example, if you have this topology:
.sp
.if n \{\
.RS 4
.\}
.nf
             y\-\-\-b\-\-\-b  branch B
            / \e /
           /   \&.
          /   / \e
         o\-\-\-x\-\-\-a\-\-\-a  branch A
.fi
.if n \{\
.RE
.\}
.sp
you would get an output like this:
.sp
.if n \{\
.RS 4
.\}
.nf
        $ git rev\-list \-\-left\-right \-\-boundary \-\-pretty=oneline A\&.\&.\&.B

        >bbbbbbb\&.\&.\&. 3rd on b
        >bbbbbbb\&.\&.\&. 2nd on b
        <aaaaaaa\&.\&.\&. 3rd on a
        <aaaaaaa\&.\&.\&. 2nd on a
        \-yyyyyyy\&.\&.\&. 1st on b
        \-xxxxxxx\&.\&.\&. 1st on a
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\-\-graph
.RS 4
Draw a text\-based graphical representation of the commit history on the left hand side of the output\&. This may cause extra lines to be printed in between commits, in order for the graph history to be drawn properly\&. Cannot be combined with
\fB\-\-no\-walk\fR\&.
.sp
This enables parent rewriting, see
\fIHistory Simplification\fR
above\&.
.sp
This implies the
\fB\-\-topo\-order\fR
option by default, but the
\fB\-\-date\-order\fR
option may also be specified\&.
.RE
.PP
\-\-show\-linear\-break[=<barrier>]
.RS 4
When \-\-graph is not used, all history branches are flattened which can make it hard to see that the two consecutive commits do not belong to a linear branch\&. This option puts a barrier in between them in that case\&. If
\fB<barrier>\fR
is specified, it is the string that will be shown instead of the default one\&.
.RE
.SH "OUTPUT"
.sp
When there are no conflicts, the output of this command is usable as input to \fBgit update\-ref \-\-stdin\fR\&. It is of the form:
.sp
.if n \{\
.RS 4
.\}
.nf
update refs/heads/branch1 ${NEW_branch1_HASH} ${OLD_branch1_HASH}
update refs/heads/branch2 ${NEW_branch2_HASH} ${OLD_branch2_HASH}
update refs/heads/branch3 ${NEW_branch3_HASH} ${OLD_branch3_HASH}
.fi
.if n \{\
.RE
.\}
.sp
where the number of refs updated depends on the arguments passed and the shape of the history being replayed\&. When using \fB\-\-advance\fR, the number of refs updated is always one, but for \fB\-\-onto\fR, it can be one or more (rebasing multiple branches simultaneously is supported)\&.
.SH "EXIT STATUS"
.sp
For a successful, non\-conflicted replay, the exit status is 0\&. When the replay has conflicts, the exit status is 1\&. If the replay is not able to complete (or start) due to some kind of error, the exit status is something other than 0 or 1\&.
.SH "EXAMPLES"
.sp
To simply rebase \fBmybranch\fR onto \fBtarget\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git replay \-\-onto target origin/main\&.\&.mybranch
update refs/heads/mybranch ${NEW_mybranch_HASH} ${OLD_mybranch_HASH}
.fi
.if n \{\
.RE
.\}
.sp
.sp
To cherry\-pick the commits from mybranch onto target:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git replay \-\-advance target origin/main\&.\&.mybranch
update refs/heads/target ${NEW_target_HASH} ${OLD_target_HASH}
.fi
.if n \{\
.RE
.\}
.sp
.sp
Note that the first two examples replay the exact same commits and on top of the exact same new base, they only differ in that the first provides instructions to make mybranch point at the new commits and the second provides instructions to make target point at them\&.
.sp
What if you have a stack of branches, one depending upon another, and you\(cqd really like to rebase the whole set?
.sp
.if n \{\
.RS 4
.\}
.nf
$ git replay \-\-contained \-\-onto origin/main origin/main\&.\&.tipbranch
update refs/heads/branch1 ${NEW_branch1_HASH} ${OLD_branch1_HASH}
update refs/heads/branch2 ${NEW_branch2_HASH} ${OLD_branch2_HASH}
update refs/heads/tipbranch ${NEW_tipbranch_HASH} ${OLD_tipbranch_HASH}
.fi
.if n \{\
.RE
.\}
.sp
.sp
When calling \fBgit replay\fR, one does not need to specify a range of commits to replay using the syntax \fBA\&.\&.B\fR; any range expression will do:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git replay \-\-onto origin/main ^base branch1 branch2 branch3
update refs/heads/branch1 ${NEW_branch1_HASH} ${OLD_branch1_HASH}
update refs/heads/branch2 ${NEW_branch2_HASH} ${OLD_branch2_HASH}
update refs/heads/branch3 ${NEW_branch3_HASH} ${OLD_branch3_HASH}
.fi
.if n \{\
.RE
.\}
.sp
.sp
This will simultaneously rebase \fBbranch1\fR, \fBbranch2\fR, and \fBbranch3\fR, all commits they have since \fBbase\fR, playing them on top of \fBorigin/main\fR\&. These three branches may have commits on top of \fBbase\fR that they have in common, but that does not need to be the case\&.
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
